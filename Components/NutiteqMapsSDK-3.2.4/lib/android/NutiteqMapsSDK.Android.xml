<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NutiteqMapsSDK.Android</name>
    </assembly>
    <members>
        <member name="T:Nutiteq.Ui.MapView">
            <summary>
            MapView is an Android-specific view class supporting map rendering and interaction.
            </summary>
            <summary>
            MapView is a platform-specific map class supporting map rendering and interaction.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapView.RegisterLicense(System.String,Android.Content.Context)">
            <summary>
            Registers the SDK license. This class method and must be called before
            creating any actual MapView instances.
            </summary>
            <param name="licenseKey">The license string provided for this application.</param>
            <param name="context">Application context for the license.</param>
            <returns>True if license is valid, false if not.</returns></member>
        <member name="M:Nutiteq.Ui.MapView.#ctor(Android.Content.Context)">
            <summary>
            Constructs a new MapView object from a context object.
            </summary>
            <param name="context">The context object.</param></member>
        <member name="M:Nutiteq.Ui.MapView.#ctor(Android.Content.Context,Android.Util.IAttributeSet)">
            <summary>
            Constructs a new MapView object from a context object and attributes.
            </summary>
            <param name="context">The context object.</param>
            <param name="attrs">The attributes.</param></member>
        <member name="F:Nutiteq.Ui.MapView._baseMapView">
            <summary>
            Internal native map view object. Not part of the public API.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.MapEventListener">
            <summary>
            The map event listener property. May be null.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.Layers">
            <summary>
            The Layers property, that can be used for adding and removing map layers.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.Options">
            <summary>
            The Options property, that can be used for modifying various map options.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.FocusPos">
            <summary>
            The position that the camera is currently looking at.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.MapRotation">
            <summary>
            The map rotation in degrees. 0 means looking north, 90 means west, -90 means east and 180 means south.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.Tilt">
            <summary>
            The map tilt angle property in degrees. 0 means looking directly at the horizon, 90 means looking directly down.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapView.Zoom">
            <summary>
            The map zoom level property. The value returned is never negative, 0 means absolutely zoomed out and all other
            values describe some level of zoom.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapView.Pan(Nutiteq.Core.MapVec,System.Single)">
            <summary>
            Pans the view relative to the current focus position. The deltaPos vector is expected to be in
            the coordinate system of the base projection. The new calculated focus position will be clamped to
            the world bounds and to the bounds set by Options::setPanBounds.
            If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaPos">The coordinate difference the map should be moved by.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetFocusPos(Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute focus position. The new focus position is expected to be in
            the coordinate system of the base projection. The new focus position will be clamped to
            the world bounds and to the bounds set by Options::setPanBounds.
            If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="pos">The new focus point position in base coordinate system.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.Rotate(System.Single,System.Single)">
            <summary>
            Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.
            The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaAngle">The delta angle value in degrees.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.Rotate(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.
            The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            Rotating is done around the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaAngle">The delta angle value in degrees.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetMapRotation(System.Single,System.Single)">
            <summary>
            Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.
            The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="angle">The new absolute rotation angle value in degrees.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetMapRotation(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.
            The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            Rotating is done around the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="angle">The new absolute rotation angle value in degrees.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetRelativeTilt(System.Single,System.Single)">
            <summary>
            Tilts the view relative to the current tilt value. Positive values tilt the view down towards the map,
            negative values tilt the view up towards the horizon. The new calculated tilt value will be clamped to
            the range of [30 .. 90] and to the range set by Options::setZoomRange.
            If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaTilt">The number of degrees the camera should be tilted by.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetTilt(System.Single,System.Single)">
            <summary>
            Sets the new absolute tilt value. 0 means look directly at the horizon, 90 means look directly down. The
            minimum tilt angle is 30 degrees and the maximum is 90 degrees. The tilt value can be further constrained
            by the Options::setTiltRange method. Values exceeding these ranges will be clamped.
            If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="tilt">The new absolute tilt value in degrees.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetRelativeZoom(System.Single,System.Single)">
            <summary>
            Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.
            The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaZoom">The delta zoom value.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetRelativeZoom(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.
            The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.
            Zooming is done towards the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaZoom">The delta zoom value.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetZoom(System.Single,System.Single)">
            <summary>
            Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum
            zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values
            exceeding these ranges will be clamped.
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="zoom">The new absolute zoom value.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.SetZoom(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum
            zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values
            exceeding these ranges will be clamped.
            Zooming is done towards the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0, the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="zoom">The new absolute zoom value.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.MoveToFitBounds(Nutiteq.Core.MapBounds,Nutiteq.Core.ScreenBounds,System.Boolean,System.Single)">
            <summary>
            Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.
            This method does not work before the screen size is set.
            </summary>
            <param name="mapBounds">The bounding box on the map to be made visible in the base projection's coordinate system.</param>
            <param name="screenBounds">The screen bounding box where to fit the map bounding box.</param>
            <param name="integerZoom">If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.</param>
            <param name="durationSeconds">The duration in which the operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.MoveToFitBounds(Nutiteq.Core.MapBounds,Nutiteq.Core.ScreenBounds,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.
            Also supports resetting the tilt and rotation angles over the course of the animation.
            This method does not work before the screen size is set.
            </summary>
            <param name="mapBounds">The bounding box on the map to be made visible in the base projection's coordinate system.</param>
            <param name="screenBounds">The screen bounding box where to fit the map bounding box.</param>
            <param name="integerZoom">If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.</param>
            <param name="resetTilt">If true, view will be untilted. If false, current tilt will be kept.</param>
            <param name="resetRotation">If true, rotation will be reset. If false, current rotation will be kept.</param>
            <param name="durationSeconds">The duration in which the operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.MapView.ScreenToMap(Nutiteq.Core.ScreenPos)">
            <summary>
            Calculates the map position corresponding to a screen position, using the current view parameters.
            </summary>
            <param name="screenPos">The screen position.</param>
            <returns>The calculated map position in base projection coordinate system.</returns></member>
        <member name="M:Nutiteq.Ui.MapView.MapToScreen(Nutiteq.Core.MapPos)">
            <summary>
            Calculates the screen position corresponding to a map position, using the current view parameters.
            </summary>
            <param name="mapPos">The map position in base projection coordinate system.</param>
            <returns>The calculated screen position.</returns></member>
        <member name="M:Nutiteq.Ui.MapView.CancelAllTasks">
            <summary>
            Cancels all qued tasks such as tile and vector data fetches. Tasks that have already started
            may continue until they finish. Tasks that are added after this method call are not affected.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapView.ClearPreloadingCaches">
            <summary>
            Releases the memory occupied by the preloading area. Calling this method releases some
            memory if preloading is enabled, but means that the area right outside the visible area has to be
            fetched again.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapView.ClearAllCaches">
            <summary>
            Releases memory occupied by all caches. Calling this means that everything has to be fetched again,
            including the visible area.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapView.CaptureRendering(Nutiteq.Ui.MapRenderListener,System.Boolean)">
            <summary>
            Captures map rendering as a bitmap. This operation is asynchronous and the result is returned via listener callback.
            </summary>
            <param name="listener">The listener interface that will receive the callback once rendering is available.</param>
            <param name="waitWhileUpdating">If true, delay the capture until all asynchronous processes are finished (for example, until all tiles are loaded).</param></member>
        <member name="T:Nutiteq.Ui.IMapView">
            <summary>
            IMapView is a platform independent interface to the
            platform-specific map rendering and interaction class.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.MapEventListener">
            <summary>
            The map event listener property. May be null.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.Layers">
            <summary>
            The Layers property, that can be used for adding and removing map layers.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.Options">
            <summary>
            The Options property, that can be used for modifying various map options.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.FocusPos">
            <summary>
            The position that the camera is currently looking at.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.MapRotation">
            <summary>
            The map rotation in degrees. 0 means looking north, 90 means west, -90 means east and 180 means south.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.Tilt">
            <summary>
            The map tilt angle property in degrees. 0 means looking directly at the horizon, 90 means looking directly down.
            </summary></member>
        <member name="P:Nutiteq.Ui.IMapView.Zoom">
            <summary>
            The map zoom level property. The value returned is never negative, 0 means absolutely zoomed out and all other
            values describe some level of zoom.
            </summary></member>
        <member name="M:Nutiteq.Ui.IMapView.Pan(Nutiteq.Core.MapVec,System.Single)">
            <summary>
            Pans the view relative to the current focus position. The deltaPos vector is expected to be in
            the coordinate system of the base projection. The new calculated focus position will be clamped to
            the world bounds and to the bounds set by Options::setPanBounds.
            If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaPos">The coordinate difference the map should be moved by.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetFocusPos(Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute focus position. The new focus position is expected to be in
            the coordinate system of the base projection. The new focus position will be clamped to
            the world bounds and to the bounds set by Options::setPanBounds.
            If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="pos">The new focus point position in base coordinate system.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.Rotate(System.Single,System.Single)">
            <summary>
            Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.
            The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaAngle">The delta angle value in degrees.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.Rotate(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.
            The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            Rotating is done around the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaAngle">The delta angle value in degrees.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetMapRotation(System.Single,System.Single)">
            <summary>
            Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.
            The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="angle">The new absolute rotation angle value in degrees.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetMapRotation(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.
            The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            Rotating is done around the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="angle">The new absolute rotation angle value in degrees.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetRelativeTilt(System.Single,System.Single)">
            <summary>
            Tilts the view relative to the current tilt value. Positive values tilt the view down towards the map,
            negative values tilt the view up towards the horizon. The new calculated tilt value will be clamped to
            the range of [30 .. 90] and to the range set by Options::setZoomRange.
            If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaTilt">The number of degrees the camera should be tilted by.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetTilt(System.Single,System.Single)">
            <summary>
            Sets the new absolute tilt value. 0 means look directly at the horizon, 90 means look directly down. The
            minimum tilt angle is 30 degrees and the maximum is 90 degrees. The tilt value can be further constrained
            by the Options::setTiltRange method. Values exceeding these ranges will be clamped.
            If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="tilt">The new absolute tilt value in degrees.</param>
            <param name="durationSeconds">The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetRelativeZoom(System.Single,System.Single)">
            <summary>
            Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.
            The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaZoom">The delta zoom value.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetRelativeZoom(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.
            The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.
            Zooming is done towards the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaZoom">The delta zoom value.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetZoom(System.Single,System.Single)">
            <summary>
            Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum
            zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values
            exceeding these ranges will be clamped.
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="zoom">The new absolute zoom value.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.SetZoom(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum
            zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values
            exceeding these ranges will be clamped.
            Zooming is done towards the specified target position, keeping it at the same location on the screen.
            If durationSeconds &gt; 0, the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="zoom">The new absolute zoom value.</param>
            <param name="targetPos">The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds">The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.MoveToFitBounds(Nutiteq.Core.MapBounds,Nutiteq.Core.ScreenBounds,System.Boolean,System.Single)">
            <summary>
            Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.
            This method does not work before the screen size is set.
            </summary>
            <param name="mapBounds">The bounding box on the map to be made visible in the base projection's coordinate system.</param>
            <param name="screenBounds">The screen bounding box where to fit the map bounding box.</param>
            <param name="integerZoom">If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.</param>
            <param name="durationSeconds">The duration in which the operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.MoveToFitBounds(Nutiteq.Core.MapBounds,Nutiteq.Core.ScreenBounds,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.
            Also supports resetting the tilt and rotation angles over the course of the animation.
            This method does not work before the screen size is set.
            </summary>
            <param name="mapBounds">The bounding box on the map to be made visible in the base projection's coordinate system.</param>
            <param name="screenBounds">The screen bounding box where to fit the map bounding box.</param>
            <param name="integerZoom">If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.</param>
            <param name="resetTilt">If true, view will be untilted. If false, current tilt will be kept.</param>
            <param name="resetRotation">If true, rotation will be reset. If false, current rotation will be kept.</param>
            <param name="durationSeconds">The duration in which the operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.IMapView.ScreenToMap(Nutiteq.Core.ScreenPos)">
            <summary>
            Calculates the map position corresponding to a screen position, using the current view parameters.
            </summary>
            <param name="screenPos">The screen position.</param>
            <returns>The calculated map position in base projection coordinate system.</returns></member>
        <member name="M:Nutiteq.Ui.IMapView.MapToScreen(Nutiteq.Core.MapPos)">
            <summary>
            Calculates the screen position corresponding to a map position, using the current view parameters.
            </summary>
            <param name="mapPos">The map position in base projection coordinate system.</param>
            <returns>The calculated screen position.</returns></member>
        <member name="M:Nutiteq.Ui.IMapView.CancelAllTasks">
            <summary>
            Cancels all qued tasks such as tile and vector data fetches. Tasks that have already started
            may continue until they finish. Tasks that are added after this method call are not affected.
            </summary></member>
        <member name="M:Nutiteq.Ui.IMapView.ClearPreloadingCaches">
            <summary>
            Releases the memory occupied by the preloading area. Calling this method releases some
            memory if preloading is enabled, but means that the area right outside the visible area has to be
            fetched again.
            </summary></member>
        <member name="M:Nutiteq.Ui.IMapView.ClearAllCaches">
            <summary>
            Releases memory occupied by all caches. Calling this means that everything has to be fetched again,
            including the visible area.
            </summary></member>
        <member name="M:Nutiteq.Ui.IMapView.CaptureRendering(Nutiteq.Ui.MapRenderListener,System.Boolean)">
            <summary>
            Captures map rendering as a bitmap. This operation is asynchronous and the result is returned via listener callback.
            </summary>
            <param name="listener">The listener interface that will receive the callback once rendering is available.</param>
            <param name="waitWhileUpdating">If true, delay the capture until all asynchronous processes are finished (for example, until all tiles are loaded).</param></member>
        <member name="T:Nutiteq.Utils.AndroidUtils">
            <summary>
            AndroidUtils is an internal class of the SDK.
            It is not intended for public usage.
            </summary></member>
        <member name="T:Nutiteq.DataSources.AssetTileDataSource">
            <summary>
            A tile data source where each map tile is a seperate image file bundled with the application.
            The requests are generated using a template scheme, where tags in the basePath string are replaced with actual values.
            The following tags are supported: zoom, x, y, xflipped, yflipped, quadkey.
            </summary>
            <summary>
            For example, if basePath = "t{zoom}_{x}_{y}.png" and the requested tile has zoom == 2,
            x == 1 and y == 3, then the tile will be loaded from the following path: "t2_1_2.png".
            </summary></member>
        <member name="M:Nutiteq.DataSources.AssetTileDataSource.SwigCreatePolymorphicInstanceAssetTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.AssetTileDataSource.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructs an AssetTileDataSource object.
            </summary>
            <param name="minZoom"> The minimum zoom level supported by this data source.</param>
            <param name="maxZoom"> The maximum zoom level supported by this data source.</param>
            <param name="basePath"> The base path containing tags (for example, "t{zoom}_{x}_{y}.png").</param></member>
        <member name="M:Nutiteq.DataSources.AssetTileDataSource.SwigGetClassNameAssetTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.AssetTileDataSource.SwigGetDirectorObjectAssetTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Utils.AssetUtils">
            <summary>
            A helper class for managing application-bundled assets.
            </summary></member>
        <member name="M:Nutiteq.Utils.AssetUtils.SetAssetManagerPointer(Android.Content.Res.AssetManager)">
            <summary>
            Internal method for connecting to asset manager.
            </summary>
            <param name="androidAssetManager"> The asset manager instance to use.</param></member>
        <member name="M:Nutiteq.Utils.AssetUtils.LoadBytes(System.String)">
            <summary>
            Loads the specified bundled asset.
            </summary>
            <param name="path"> The path of the asset to load. The path is relative to application root folder.</param>
            <returns>The loaded asset as a byte vector or null if the asset was not found or could not be loaded.</returns></member>
        <member name="T:Nutiteq.VectorElements.BalloonPopup">
            <summary>
            A highly configurable popup implementation that allows the user to specify a title, description, colors, images, font sizes etc.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.SwigCreatePolymorphicInstanceBalloonPopup(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.BalloonPopup.Style">
            <summary>
            The BalloonPopupStyle property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.#ctor(Nutiteq.VectorElements.Billboard,Nutiteq.Styles.BalloonPopupStyle,System.String,System.String)">
            <summary>
            Constructs a BalloonPopup object with the specified style and attaches it to a billboard element.
            If an empty string is passed for the title, it will not be drawn. The same applies to the description.
            </summary>
            <param name="baseBillboard"> The billboard this balloon popup will be attached to.</param>
            <param name="style"> The style that defines what this balloon popup looks like.</param>
            <param name="title"> The text this balloon popup will display.</param>
            <param name="desc"> The description this balloon popup will display.</param></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.#ctor(Nutiteq.Geometry.Geometry,Nutiteq.Styles.BalloonPopupStyle,System.String,System.String)">
            <summary>
            Constructs a BalloonPopup object from a geometry object and a style.
            If an empty string is passed for the title, it will not be drawn. The same applies to the description.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this balloon popup.</param>
            <param name="style"> The style that defines what this balloon popup looks like.</param>
            <param name="title"> The text this balloon popup will display.</param>
            <param name="desc"> The description this balloon popup will display.</param></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.#ctor(Nutiteq.Core.MapPos,Nutiteq.Styles.BalloonPopupStyle,System.String,System.String)">
            <summary>
            Constructs a BalloonPopup object from a map position and a style.
            If an empty string is passed for the title, it will not be drawn. The same applies to the description.
            </summary>
            <param name="pos"> The map position that defines the location of this balloon popup.</param>
            <param name="style"> The style that defines what this balloon popup looks like.</param>
            <param name="title"> The text this balloon popup will display.</param>
            <param name="desc"> The description this balloon popup will display.</param></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.getStyleInternal">
            <summary>
            Returns the style of this balloon popup.
            </summary>
            <returns>The style that defines what this balloon popup looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.setStyleInternal(Nutiteq.Styles.BalloonPopupStyle)">
            <summary>
            Sets the style for this balloon popup.
            </summary>
            <returns>The new style that defines what this balloon popup looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.SwigGetClassNameBalloonPopup">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.BalloonPopup.SwigGetDirectorObjectBalloonPopup">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.BalloonPopup.Title">
            <summary>
            Returns the title of this balloon popup.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.BalloonPopup.Description">
            <summary>
            Returns the description of this balloon popup.
            </summary></member>
        <member name="T:Nutiteq.Styles.BalloonPopupMargins">
            <summary>
            Margins info for balloon popup.
            </summary></member>
        <member name="T:Nutiteq.Styles.BalloonPopupStyle">
            <summary>
            A style for balloon popups. Contains attributes for configuring how the balloon popup is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyle.SwigCreatePolymorphicInstanceBalloonPopupStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyle.#ctor(Nutiteq.Graphics.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Int32,System.Boolean,System.Int32,Nutiteq.Graphics.Color,Nutiteq.Graphics.Bitmap,Nutiteq.Styles.BalloonPopupMargins,Nutiteq.Graphics.Color,Nutiteq.Graphics.Bitmap,Nutiteq.Styles.BalloonPopupMargins,Nutiteq.Graphics.Color,System.String,System.Int32,Nutiteq.Styles.BalloonPopupMargins,System.Boolean,Nutiteq.Graphics.Color,System.String,System.Int32,Nutiteq.Styles.BalloonPopupMargins,System.Boolean,Nutiteq.Graphics.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a BalloonPopupStyle object from various parameters. Instantiating the object directly is
            not recommended, BalloonPopupStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the popup.</param>
            <param name="attachAnchorPointX"> The horizontal attaching anchor point for the popup.</param>
            <param name="attachAnchorPointY"> The vertical attaching anchor point for the popup.</param>
            <param name="causesOverlap"> The causes overlap flag for the billboard.</param>
            <param name="hideIfOverlapped"> The hide if overlapped flag for the billboard.</param>
            <param name="horizontalOffset"> The horizontal offset for the popup.</param>
            <param name="verticalOffset"> The vertical offset for the popup.</param>
            <param name="placementPriority"> The placement priority for the popup.</param>
            <param name="scaleWithDPI"> The scale with DPI flag for the popup.</param>
            <param name="cornerRadius"> The corner radius of the popup in dp.</param>
            <param name="leftColor"> The background color of the left part of the popup.</param>
            <param name="leftImage"> The image of the left part of the popup.</param>
            <param name="leftMargins"> The margins of the left part of the popup.</param>
            <param name="rightColor"> The background color of the right part of the popup.</param>
            <param name="rightImage"> The margins of the right part of the popup.</param>
            <param name="rightMargins"> The margins of the right part of the popup.</param>
            <param name="titleColor"> The color of the title.</param>
            <param name="titleFontName"> The name of the title font.</param>
            <param name="titleFontSize"> The size of the title font.</param>
            <param name="titleMargins"> The margins of the title.</param>
            <param name="titleWrap"> True if long titles are wrapped, false if it is truncated.</param>
            <param name="descColor"> The color of the description.</param>
            <param name="descFontName"> The name of the description font.</param>
            <param name="descFontSize"> The size of the description font.</param>
            <param name="descMargins"> The margins of the description.</param>
            <param name="descWrap"> True if long descriptions are wrapped, false if it is truncated.</param>
            <param name="strokeColor"> The color of the stroke surrounding the popup.</param>
            <param name="strokeWidth"> The width of the stroke surrounding the popup in dp.</param>
            <param name="triangleWidth"> The width of the triangle at the bottom of the popup in dp.</param>
            <param name="triangleHeight"> The height of the triangle at the bottom of the popup in dp.</param></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyle.SwigGetClassNameBalloonPopupStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyle.SwigGetDirectorObjectBalloonPopupStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.BackgroundColor">
            <summary>
            Returns the background color of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.CornerRadius">
            <summary>
            Returns the corner radius of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.LeftColor">
            <summary>
            Returns the background color of the left part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.LeftImage">
            <summary>
            Returns the image of the left part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.LeftMargins">
            <summary>
            Returns the margins of the left part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.RightColor">
            <summary>
            Returns the background color of the right part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.RightImage">
            <summary>
            Returns the image of the right part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.RightMargins">
            <summary>
            Returns the margins of the right part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TitleColor">
            <summary>
            Returns the color of the title.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TitleFontName">
            <summary>
            Returns the name of the title font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TitleFontSize">
            <summary>
            Returns the size of the title font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TitleMargins">
            <summary>
            Returns the margins of the title.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TitleWrap">
            <summary>
            Returns the state of the title wrap parameter.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.DescriptionColor">
            <summary>
            Returns the color of the description.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.DescriptionFontName">
            <summary>
            Returns the name of the description font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.DescriptionFontSize">
            <summary>
            Returns the size of the description font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.DescriptionMargins">
            <summary>
            Returns the margins of the description.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.DescriptionWrap">
            <summary>
            Returns the state of the description wrap parameter.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.StrokeColor">
            <summary>
            Returns the color of the stroke surrounding the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.StrokeWidth">
            <summary>
            Returns the width of the stroke surrounding the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TriangleWidth">
            <summary>
            Returns the width of the triangle at the bottom of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyle.TriangleHeight">
            <summary>
            Returns the height of the triangle at the bottom of the popup.
            </summary></member>
        <member name="T:Nutiteq.Styles.BalloonPopupStyleBuilder">
            <summary>
            A builder class for BalloonPopupStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyleBuilder.SwigCreatePolymorphicInstanceBalloonPopupStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyleBuilder.#ctor">
            <summary>
            Constructs a BalloonPopupStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the BalloonPopupStyle object using previously set parameters.
            </summary>
            <returns>A new BalloonPopupStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyleBuilder.SwigGetClassNameBalloonPopupStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.BalloonPopupStyleBuilder.SwigGetDirectorObjectBalloonPopupStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.CornerRadius">
            <summary>
            Returns the corner radius of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.LeftColor">
            <summary>
            Returns the background color of the left part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.LeftImage">
            <summary>
            Returns the image of the left part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.LeftMargins">
            <summary>
            Returns the margins of the left part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.RightColor">
            <summary>
            Returns the background color of the right part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.RightImage">
            <summary>
            Returns the image of the right part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.RightMargins">
            <summary>
            Returns the margins of the right part of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TitleColor">
            <summary>
            Returns the color of the title.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TitleFontName">
            <summary>
            Returns the name of the title font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TitleFontSize">
            <summary>
            Returns the size of the title font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TitleMargins">
            <summary>
            Returns the margins of the title.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TitleWrap">
            <summary>
            Returns the state of the title wrap parameter.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.DescriptionColor">
            <summary>
            Returns the color of the description.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.DescriptionFontName">
            <summary>
            Returns the name of the description font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.DescriptionFontSize">
            <summary>
            Returns the size of the description font.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.DescriptionMargins">
            <summary>
            Returns the margins of the description.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.DescriptionWrap">
            <summary>
            Returns the state of the description wrap parameter.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.StrokeColor">
            <summary>
            Returns the color of the stroke surrounding the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.StrokeWidth">
            <summary>
            Returns the width of the stroke surrounding the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TriangleWidth">
            <summary>
            Returns the width of the triangle at the bottom of the popup.
            </summary></member>
        <member name="P:Nutiteq.Styles.BalloonPopupStyleBuilder.TriangleHeight">
            <summary>
            Returns the height of the triangle at the bottom of the popup.
            </summary></member>
        <member name="T:Nutiteq.Ui.BaseMapView">
            <summary>
            A platform independent main view class for all mapping operations.
            Allows the user to manipulate the map and access various related components.
            </summary></member>
        <member name="P:Nutiteq.Ui.BaseMapView.MapEventListener">
            <summary>
            The MapEventListener property.
            </summary></member>
        <member name="P:Nutiteq.Ui.BaseMapView.RedrawRequestListener">
            <summary>
            The RedrawRequestListener property.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.RegisterLicense(System.String)">
            <summary>
            Registers the SDK license. This class method and must be called before
            creating any actual MapView instances.
            </summary>
            <param name="licenseKey"> The license string provided for this application.</param>
            <returns>True if license is valid, false if not.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.OnSurfaceCreated">
            <summary>
            Prepares renderers for drawing. Has to be called again if the graphics context was lost.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.OnSurfaceChanged(System.Int32,System.Int32)">
            <summary>
            Changes the screen size of the map view. Calling this method before
            onSurfaceCreated is called results in undefined behaviour.
            </summary>
            <param name="width"> The new width of the map view.</param>
            <param name="height"> The new height of the map view.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.OnDrawFrame">
            <summary>
            Draws a single frame to the current graphics context. Calling this method before
            onSurfaceCreated and onSurfaceChanged are called results in undefined behaviour.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.OnSurfaceDestroyed">
            <summary>
            Stops renderer. Rendering may resume only after onSurfaceCreated is called again.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.OnInputEvent(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Handles a user input event.
            </summary>
            <param name="event"> The event type. First pointer down = 0, second pointer down = 1, either pointer moved = 2,
            gesture canceled = 3, first pointer up = 4, second pointer up = 5.</param>
            <param name="x1"> The x coordinate of the first pointer. -1 if there are no coordinates.</param>
            <param name="y1"> The y coordinate of the first pointer. -1 if there are no coordinates.</param>
            <param name="x2"> The x coordinate of the second pointer. -1 if there are no coordinates.</param>
            <param name="y2"> The y coordinate of the second pointer. -1 if there are no coordinates.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.GetLayers">
            <summary>
            Returns the Layers object, that can be used for adding and removing map layers.
            </summary>
            <returns>The Layer object.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.GetOptions">
            <summary>
            Returns the Options object, that can be used for modifying various map options.
            </summary>
            <returns>the Option object.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.GetFocusPos">
            <summary>
            Returns the position that the camera is currently looking at.
            </summary>
            <returns>The current focus position in the coordinate system of the base projection.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.GetRotation">
            <summary>
            Returns the map rotation in degrees. 0 means looking north, 90 means west, -90 means east and 180 means south.
            </summary>
            <returns>The map rotation in degrees in range of (-180 .. 180].</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.GetTilt">
            <summary>
            Returns the tilt angle in degrees. 0 means looking directly at the horizon, 90 means looking directly down.
            </summary>
            <returns>The tilt angle in degrees.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.GetZoom">
            <summary>
            Returns the zoom level. The value returned is never negative, 0 means absolutely zoomed out and all other
            values describe some level of zoom.
            </summary>
            <returns>The zoom level.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.Pan(Nutiteq.Core.MapVec,System.Single)">
            <summary>
            Pans the view relative to the current focus position. The deltaPos vector is expected to be in
            the coordinate system of the base projection. The new calculated focus position will be clamped to
            the world bounds and to the bounds set by Options::setPanBounds.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaPos"> The relative coordinate shift.</param>
            <param name="durationSeconds"> The duration in which the panning operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.SetFocusPos(Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute focus position. The new focus position is expected to be in
            the coordinate system of the base projection. The new focus position will be clamped to
            the world bounds and to the bounds set by Options::setPanBounds.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the panning operation will be animated over time. If the previous panning animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="pos"> The new absolute focus position.</param>
            <param name="durationSeconds"> The duration in which the panning operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.Rotate(System.Single,System.Single)">
            <summary>
            Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.
            The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaAngle"> The delta rotation value in degrees.</param>
            <param name="durationSeconds"> The duration in which the rotation operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.Rotate(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Rotates the view relative to the current rotation value. Positive values rotate clockwise, negative values counterclockwise.
            The new calculated rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            </summary>
            <summary>
            Rotating is done around the specified target position, keeping it at the same location on the screen.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaAngle"> The delta angle value in degrees.</param>
            <param name="targetPos"> The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds"> The duration in which the rotation operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.SetRotation(System.Single,System.Single)">
            <summary>
            Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.
            The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="angle"> The new absolute angle value in degrees.</param>
            <param name="durationSeconds"> The duration in which the rotation operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.SetRotation(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute rotation value. 0 means look north, 90 means west, -90 means east and 180 means south.
            The rotation value will be wrapped to the range of (-180 .. 180]. Rotations are ignored if Options::setRotatable
            is set to false.
            </summary>
            <summary>
            Rotating is done around the specified target position, keeping it at the same location on the screen.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the rotating operation will be animated over time. If the previous rotating animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="angle"> The new absolute angle value in degrees.</param>
            <param name="targetPos"> The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds"> The duration in which the rotation operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.Tilt(System.Single,System.Single)">
            <summary>
            Tilts the view relative to the current tilt value. Positive values tilt the view down towards the map,
            negative values tilt the view up towards the horizon. The new calculated tilt value will be clamped to
            the range of [30 .. 90] and to the range set by Options::setZoomRange.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaTilt"> The number of degrees the camera should be tilted by.</param>
            <param name="durationSeconds"> The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.SetTilt(System.Single,System.Single)">
            <summary>
            Sets the new absolute tilt value. 0 means look directly at the horizon, 90 means look directly down. The
            minimum tilt angle is 30 degrees and the maximum is 90 degrees. The tilt value can be further constrained
            by the Options::setTiltRange method. Values exceeding these ranges will be clamped.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the tilting operation will be animated over time. If the previous tilting animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="tilt"> The new absolute tilt value in degrees.</param>
            <param name="durationSeconds"> The duration in which the tilting operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.Zoom(System.Single,System.Single)">
            <summary>
            Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.
            The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaZoom"> The delta zoom value.</param>
            <param name="durationSeconds"> The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.Zoom(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Zooms the view relative to the current zoom value. Positive values zoom in, negative values zoom out.
            The new calculated zoom value will be clamped to the range of [0 .. 24] and to the range set by Options::setZoomRange.
            </summary>
            <summary>
            Zooming is done towards the specified target position, keeping it at the same location on the screen.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="deltaZoom"> The delta zoom value.</param>
            <param name="targetPos"> The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds"> The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.SetZoom(System.Single,System.Single)">
            <summary>
            Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum
            zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values
            exceeding these ranges will be clamped.
            </summary>
            <summary>
            If durationSeconds &gt; 0 the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="zoom"> The new absolute zoom value.</param>
            <param name="durationSeconds"> The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.SetZoom(System.Single,Nutiteq.Core.MapPos,System.Single)">
            <summary>
            Sets the new absolute zoom value. The minimum zoom value is 0, which means absolutely zoomed out and the maximum
            zoom value is 24. The zoom value can be further constrained by the Options::setZoomRange method. Values
            exceeding these ranges will be clamped.
            </summary>
            <summary>
            Zooming is done towards the specified target position, keeping it at the same location on the screen.
            </summary>
            <summary>
            If durationSeconds &gt; 0, the zooming operation will be animated over time. If the previous zooming animation has not
            finished by the time this method is called, it will be stopped.
            </summary>
            <param name="zoom"> The new absolute zoom value.</param>
            <param name="targetPos"> The zooming target position in the coordinate system of the base projection.</param>
            <param name="durationSeconds"> The duration in which the zooming operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.MoveToFitBounds(Nutiteq.Core.MapBounds,Nutiteq.Core.ScreenBounds,System.Boolean,System.Single)">
            <summary>
            Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.
            This method does not work before the screen size is set.
            </summary>
            <param name="mapBounds"> The bounding box on the map to be made visible in the base projection's coordinate system.</param>
            <param name="screenBounds"> The screen bounding box where to fit the map bounding box.</param>
            <param name="integerZoom"> If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.</param>
            <param name="durationSeconds"> The duration in which the operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.MoveToFitBounds(Nutiteq.Core.MapBounds,Nutiteq.Core.ScreenBounds,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Animate the view parameters (focus position, tilt, rotation, zoom) so that the specified bounding box becomes fully visible.
            Also supports resetting the tilt and rotation angles over the course of the animation.
            This method does not work before the screen size is set.
            </summary>
            <param name="mapBounds"> The bounding box on the map to be made visible in the base projection's coordinate system.</param>
            <param name="screenBounds"> The screen bounding box where to fit the map bounding box.</param>
            <param name="integerZoom"> If true, then closest integer zoom level will be used. If false, exact fractional zoom level will be used.</param>
            <param name="resetTilt"> If true, view will be untilted. If false, current tilt will be kept.</param>
            <param name="resetRotation"> If true, rotation will be reset. If false, current rotation will be kept.</param>
            <param name="durationSeconds"> The duration in which the operation will be completed in seconds.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.getMapEventListenerInternal">
            <summary>
            Returns the map event listener. May be null.
            </summary>
            <returns>The map event listener.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.setMapEventListenerInternal(Nutiteq.Ui.MapEventListener)">
            <summary>
            Sets the map event listener. If a null pointer is passed no map events will be generated. The default is null.
            </summary>
            <param name="mapEventListener"> The new map event listener.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.getRedrawRequestListenerInternal">
            <summary>
            Returns the redraw request listener.
            </summary>
            <returns>The redraw request listener.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.setRedrawRequestListenerInternal(Nutiteq.Ui.RedrawRequestListener)">
            <summary>
            Sets the listener which will notified when the map needs to be redrawn
            </summary>
            <param name="listener"> The redraw listener.</param></member>
        <member name="M:Nutiteq.Ui.BaseMapView.ScreenToMap(Nutiteq.Core.ScreenPos)">
            <summary>
            Calculates the map position corresponding to a screen position, using the current view parameters.
            </summary>
            <param name="screenPos"> The screen position.</param>
            <returns>The calculated map position in base projection coordinate system.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.MapToScreen(Nutiteq.Core.MapPos)">
            <summary>
            Calculates the screen position corresponding to a map position, using the current view parameters.
            </summary>
            <param name="mapPos"> The map position in base projection coordinate system.</param>
            <returns>The calculated screen position.</returns></member>
        <member name="M:Nutiteq.Ui.BaseMapView.CancelAllTasks">
            <summary>
            Cancels all qued tasks such as tile and vector data fetches. Tasks that have already started
            may continue until they finish. Tasks that are added after this method call are not affected.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.ClearPreloadingCaches">
            <summary>
            Releases the memory occupied by the preloading area. Calling this method releases some
            memory if preloading is enabled, but means that the area right outside the visible area has to be
            fetched again.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.ClearAllCaches">
            <summary>
            Releases memory occupied by all caches. Calling this means that everything has to be fetched again,
            including the visible area.
            </summary></member>
        <member name="M:Nutiteq.Ui.BaseMapView.CaptureRendering(Nutiteq.Ui.MapRenderListener,System.Boolean)">
            <summary>
            Captures map rendering as a bitmap. This operation is asynchronous and the result is returned via listener callback.
            </summary>
            <param name="listener"> The listener interface that will receive the callback once rendering is available.</param>
            <param name="waitWhileUpdating"> If true, delay the capture until all asynchronous processes are finished (for example, until all tiles are loaded).</param></member>
        <member name="T:Nutiteq.VectorElements.Billboard">
            <summary>
            A base class for billboard elements that can be displayed on the map.
            Billboards can either be given a concrete position on the map or be attached to
            other billboards.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Billboard.SwigCreatePolymorphicInstanceBillboard(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Billboard.RootGeometry">
            <summary>
            The Geometry property.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Billboard.Geometry">
            <summary>
            The Geometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Billboard.getRootGeometryInternal">
            <summary>
            Returns the location of the root billboard. If this billboard has a location,
            this method is equavalent to the Billboard::getGeometry method. If this billboard is attached
            to another billboard, the hierarchy is traveled recursively and the location of the root
            billboard is returned.
            </summary>
            <returns>The geometry object that defines the location of the root billboard. Null if there's no root billboard.</returns></member>
        <member name="M:Nutiteq.VectorElements.Billboard.getGeometryInternal">
            <summary>
            Returns the geometry object that defines the location of this billboard.
            </summary>
            <returns>The geometry object of this billboard.</returns></member>
        <member name="M:Nutiteq.VectorElements.Billboard.setGeometryInternal(Nutiteq.Geometry.Geometry)">
            <summary>
            Sets the location for this billboard. If this billboard is attached
            to another billboard, it will first be detached.
            </summary>
            <param name="geometry"> The new geometry object that defines the location of this billboard.</param></member>
        <member name="M:Nutiteq.VectorElements.Billboard.SetPos(Nutiteq.Core.MapPos)">
            <summary>
            Sets the location for this billboard. If this billboard is attached
            to another billboard, it will first be detached.
            </summary>
            <param name="pos"> The new map position that defines the location of this billboard.</param></member>
        <member name="M:Nutiteq.VectorElements.Billboard.SwigGetClassNameBillboard">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Billboard.SwigGetDirectorObjectBillboard">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Billboard.Rotation">
            <summary>
            Returns the rotation angle of this billboard.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Billboard.Bounds">
            <summary>
            Returns the bounds of this billboard or the base billboard, if there is one.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Billboard.BaseBillboard">
            <summary>
            Returns the base billboard this billboard is attached to.
            </summary></member>
        <member name="T:Nutiteq.Styles.BillboardOrientation">
            <summary>
            Possible orientation modes for billboards.
            </summary></member>
        <member name="F:Nutiteq.Styles.BillboardOrientation.BillboardOrientationFaceCamera">
            <summary>
            Billboard always faces the camera plane, regardless of rotation.
            </summary></member>
        <member name="F:Nutiteq.Styles.BillboardOrientation.BillboardOrientationFaceCameraGround">
            <summary>
            Billboard lies parallel to the ground and rotates around it's
            anchor point to face the camera. SetRotation can be used to offset the
            final angle of the billboard.
            </summary></member>
        <member name="F:Nutiteq.Styles.BillboardOrientation.BillboardOrientationGround">
            <summary>
            Billboard lies on the ground, orientation does not depend on the
            camera position.
            </summary></member>
        <member name="T:Nutiteq.Styles.BillboardScaling">
            <summary>
            Possible scaling modes for billboards.
            </summary></member>
        <member name="F:Nutiteq.Styles.BillboardScaling.BillboardScalingWorldSize">
            <summary>
            Billboard has a constant world space size. Zooming causes the billboard
            to get smaller or bigger on the screen.
            </summary></member>
        <member name="F:Nutiteq.Styles.BillboardScaling.BillboardScalingScreenSize">
            <summary>
            Billboard's size on screen is unaffected by zooming, but billboards
            that are further away from the camera get smaller when the tilt angle is &lt; 90.
            </summary></member>
        <member name="F:Nutiteq.Styles.BillboardScaling.BillboardScalingConstScreenSize">
            <summary>
            Billboard's screen size is always the same, regardless of the zoom level, tilt angle or
            billboard's position.
            </summary></member>
        <member name="T:Nutiteq.Styles.BillboardStyle">
            <summary>
            A base class for BillboardStyle subclasses.
            </summary></member>
        <member name="M:Nutiteq.Styles.BillboardStyle.SwigCreatePolymorphicInstanceBillboardStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.BillboardStyle.SwigGetClassNameBillboardStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.BillboardStyle.SwigGetDirectorObjectBillboardStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.ScaleWithDPI">
            <summary>
            Returns the state of the scale with DPI flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.PlacementPriority">
            <summary>
            Returns the placement priority of the billboard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.CausesOverlap">
            <summary>
            Returns the state of the causes overlap flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.HideIfOverlapped">
            <summary>
            Returns the state of the allow overlap flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.AttachAnchorPointX">
            <summary>
            Returns the horizontal attaching anchor point of the billoard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.AttachAnchorPointY">
            <summary>
            Returns the vertical attaching anchor point of the billoard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.HorizontalOffset">
            <summary>
            Returns the horizontal offset of the billboard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyle.VerticalOffset">
            <summary>
            Returns the vertical offset of the billboard.
            </summary></member>
        <member name="T:Nutiteq.Styles.BillboardStyleBuilder">
            <summary>
            A base class for BillboardStyleBuilder subclasses.
            </summary></member>
        <member name="M:Nutiteq.Styles.BillboardStyleBuilder.SwigCreatePolymorphicInstanceBillboardStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.BillboardStyleBuilder.SetAttachAnchorPoint(System.Single,System.Single)">
            <summary>
            Sets the attaching anchor point for the billoard. The attaching anchor point is
            only used if the billboard is attached to another (base) billboard. It defines the point
            on the base billboard where the attachable billboard will be placed.
            </summary>
            <param name="attachAnchorPointX"> The new horizontal attaching anchor point for the billoard. -1 means the left side,
            0 the center and 1 the right side. The default is 0.</param>
            <param name="attachAnchorPointY"> The new vertical attaching anchor point for the billoard. -1 means the bottom,
            0 the center and 1 the top. The default is 1.</param></member>
        <member name="M:Nutiteq.Styles.BillboardStyleBuilder.SwigGetClassNameBillboardStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.BillboardStyleBuilder.SwigGetDirectorObjectBillboardStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.ScaleWithDPI">
            <summary>
            Returns the state of the scale with DPI flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.PlacementPriority">
            <summary>
            Returns the placement priority of the billboard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.CausesOverlap">
            <summary>
            Returns the state of the causes overlap flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.HideIfOverlapped">
            <summary>
            Returns the state of the allow overlap flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.AttachAnchorPointX">
            <summary>
            Returns the horizontal attaching anchor point of the billoard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.AttachAnchorPointY">
            <summary>
            Returns the vertical attaching anchor point of the billoard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.HorizontalOffset">
            <summary>
            Returns the horizontal offset of the billboard.
            </summary></member>
        <member name="P:Nutiteq.Styles.BillboardStyleBuilder.VerticalOffset">
            <summary>
            Returns the vertical offset of the billboard.
            </summary></member>
        <member name="T:Nutiteq.Graphics.Bitmap">
            <summary>
            A class that provides the functionality to store, compress, uncompress and resize basic image formats.
            Currently supported formats are png and jpeg. Upon loading compressed images will be converted to
            alpha premultiplied uncompressed bitmaps of various image formats.
            </summary></member>
        <member name="M:Nutiteq.Graphics.Bitmap.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.#ctor(System.String,System.Boolean)">
            <summary>
            Deprecated: use BitmapUtils.LoadFromAssets instead.
            Constructs a bitmap by loading a compressed image bundled with the application. If the power of two conversion flag
            is set, additional padding will be added to the image to make it's dimensions power of two. This can be useful when creating
            OpenGL textures from the Bitmap, because some GPUs perform badly with non power of two textures.
            </summary>
            <param name="assetPath"> The path to the image to be loaded.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param></member>
        <member name="M:Nutiteq.Graphics.Bitmap.#ctor(Nutiteq.WrappedCommons.UnsignedCharVector,System.Boolean)">
            <summary>
            Deprecated: use Bitmap.CreateFromCompressed instead.
            Constructs a bitmap by decoding a vector of compressed image bytes. If the power of two conversion flag
            is set, additional padding will be added to the image to make it's dimensions power of two. This can be useful when creating
            OpenGL textures from the Bitmap, because some GPUs perform badly with non power of two textures.
            </summary>
            <param name="compressedData"> A vector of compressed image bytes.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param></member>
        <member name="M:Nutiteq.Graphics.Bitmap.#ctor(Nutiteq.WrappedCommons.UnsignedCharVector,System.UInt32,System.UInt32,Nutiteq.Graphics.ColorFormat,System.Int32,System.Boolean)">
            <summary>
            Constructs a bitmap from an already decoded vector of bytes. The bitmap data is expected to be alpha premultiplied, if alpha channel is used.
            If the power of two conversion flag is set, additional padding will be added to the image to make it's dimensions power of two.
            This can be useful when creating OpenGL textures from the Bitmap, because some GPUs perform badly with non power of two textures.
            </summary>
            <param name="pixelData"> A vector of decoded, premultiplied bitmap bytes.</param>
            <param name="width"> The width of the bitmap.</param>
            <param name="height"> The height of the bitmap.</param>
            <param name="colorFormat"> The color format of the bitmap.</param>
            <param name="bytesPerRow"> The total number of bytes per row. Some bitmaps have additional padding at the end of each row. If the value is negative, then bitmap is assumed to be vertically flipped. In this case absolute value of the bytesPerRow value is used.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param></member>
        <member name="M:Nutiteq.Graphics.Bitmap.GetPixelDataCopy">
            <summary>
            Returns a copy of the pixel data of this bitmap.
            </summary>
            <returns>A byte vector of the bitmap's pixel data.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.CompressToPng">
            <summary>
            Compresses this bitmap to a png.
            </summary>
            <returns>A byte vector of the png's data.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.CompressToInternal">
            <summary>
            Compresses this bitmap to a internal format.
            This operation is intended for serialization of the data only, no actual compression is performed.
            </summary>
            <returns>A byte vector of the serialized data.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.GetResizedBitmap(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Returns resized version of the bitmap. The power of two padding added during the construction of this bitmap
            will be removed prior to resizing. If the power of two conversion flag is set, new padding will be added to the image
            after resizing to make it's dimensions power of two.
            </summary>
            <param name="width"> The new width of this bitmap.</param>
            <param name="height"> The new height of this bitmap.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param>
            <returns>The resized bitmap instance or null in case of error (wrong dimensions).</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.GetSubBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns sub-bitmap with specified offsets and dimensions.
            </summary>
            <param name="xOffset"> X coordinate offset in the bitmap.</param>
            <param name="yOffset"> Y coordinate offset in the bitmap.</param>
            <param name="width"> Width of the sub-bitmap.</param>
            <param name="height"> Height of the sub-bitmap.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param>
            <returns>Sub-bitmap instance or null in case of error (wrong dimensions).</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.GetRGBABitmap(System.Boolean)">
            <summary>
            Returns copy of the bitmap converted to RGBA format.
            </summary>
            <param name="pow2Padding"> The power of two conversion flag.</param>
            <returns>The bitmap with identical dimensions but converted to RGBA format.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.GetUnpaddedBitmap">
            <summary>
            Returns copy of the bitmap with padding removed.
            </summary>
            <returns>The bitmap with original dimensions.</returns></member>
        <member name="M:Nutiteq.Graphics.Bitmap.CreateFromCompressed(Nutiteq.WrappedCommons.UnsignedCharVector,System.Boolean)">
            <summary>
            Creates a new bitmap from compressed byte vector.
            If the power of two conversion flag is set, additional padding will be added to the image to make it's dimensions power of two.
            </summary>
            <param name="compressedData"> The compressed bitmap data.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param>
            <returns>The bitmap created from the compressed data. If the decompression fails, null is returned.</returns></member>
        <member name="P:Nutiteq.Graphics.Bitmap.Width">
            <summary>
            Returns the width of the bitmap.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Bitmap.Height">
            <summary>
            Returns the height of the bitmap.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Bitmap.OrigWidth">
            <summary>
            Returns the unpadded width of this bitmap. If power of two padding was added when constructing this bitmap, the original unpadded
            bitmap's width will be returned. If no padding was added, this method is equivalent to the getWidth() method.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Bitmap.OrigHeight">
            <summary>
            Returns the unpadded height of this bitmap. If power of two padding was added when constructing this bitmap, the original unpadded
            bitmap's height will be returned. If no padding was added, this method is equivalent to the getHeight() method.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Bitmap.ColorFormat">
            <summary>
            Returns the color format of this bitmap.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Bitmap.BytesPerPixel">
            <summary>
            Returns the bytes per pixel parameter of this bitmap. Valid values are 1, 2, 3 and 4.
            </summary></member>
        <member name="T:Nutiteq.DataSources.BitmapOverlayRasterTileDataSource">
            <summary>
            Tile data source that uses given bitmap with two, three or four control points define a raster overlay.
            Note: if two points are given, conformal transformation is calculated. If three points are given, affine transformation is calculated. In case of four points, perspective transformation is used.
            </summary></member>
        <member name="M:Nutiteq.DataSources.BitmapOverlayRasterTileDataSource.SwigCreatePolymorphicInstanceBitmapOverlayRasterTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.BitmapOverlayRasterTileDataSource.#ctor(System.Int32,System.Int32,Nutiteq.Graphics.Bitmap,Nutiteq.Projections.Projection,Nutiteq.WrappedCommons.MapPosVector,Nutiteq.WrappedCommons.ScreenPosVector)">
            <summary>
            Constructs a new bitmap overlay data source.
            </summary>
            <param name="minZoom"> The minimum zoom for generated tiles.</param>
            <param name="maxZoom"> The maximum zoom for generated tiles.</param>
            <param name="bitmap"> The bitmap to use as an overlay.</param>
            <param name="projection"> The projection definining coordinate system of the control points.</param>
            <param name="mapPoses"> The geographical control points. The list must contain either 2, 3 or 4 points.</param>
            <param name="bitmapPoses"> The pixel coordinates in the bitmap corresponding to geographical control points. The number of coordinates must be equal to the number of control points in mapPoses list.</param></member>
        <member name="M:Nutiteq.DataSources.BitmapOverlayRasterTileDataSource.SwigGetClassNameBitmapOverlayRasterTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.BitmapOverlayRasterTileDataSource.SwigGetDirectorObjectBitmapOverlayRasterTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.BitmapOverlayRasterTileDataSource.DataExtent">
            <summary>
            Returns the extent of this data source. Extent is the minimal bounding box encompassing all the raster data.
            </summary></member>
        <member name="T:Nutiteq.Utils.BitmapUtils">
            <summary>
            A helper class for loading bitmaps and converting Bitmaps to Android Bitmaps an vice versa.
            </summary></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.LoadBitmapFromAssets(System.String)">
            <summary>
            Loads the specified bitmap asset bundled with the application.
            </summary>
            <param name="assetPath"> The asset path to the image to be loaded.</param></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.LoadBitmapFromAssets(System.String,System.Boolean)">
            <summary>
            Loads the specified bitmap asset bundled with the application. If the power of two conversion flag is set,
            additional padding will be added to the image to make it's dimensions power of two.
            </summary>
            <param name="assetPath"> The asset path to the image to be loaded.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.LoadBitmapFromFile(System.String)">
            <summary>
            Loads bitmap from specified file.
            </summary>
            <param name="filePath"> The path to the image to be loaded.</param></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.LoadBitmapFromFile(System.String,System.Boolean)">
            <summary>
            Loads bitmap from specified file. If the power of two conversion flag is set,
            additional padding will be added to the image to make it's dimensions power of two.
            </summary>
            <param name="filePath"> The path to the image to be loaded.</param>
            <param name="pow2Padding"> The power of two conversion flag.</param></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.CreateBitmapFromAndroidBitmap(Android.Graphics.Bitmap)">
            <summary>
            Creates a new Bitmap object from an existing Android Bitmap.
            </summary></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.CreateBitmapFromAndroidBitmap(Android.Graphics.Bitmap,System.Boolean)">
            <summary>
            Creates a new Bitmap object from an existing Android Bitmap. If the power of two conversion flag is set,
            additional padding will be added to the image to make it's dimensions power of two.
            </summary>
            <param name="pow2Padding"> The power of two conversion flag.</param></member>
        <member name="M:Nutiteq.Utils.BitmapUtils.CreateAndroidBitmapFromBitmap(Nutiteq.Graphics.Bitmap)">
            <summary>
            Creates a new Android Bitmap from an existing Bitmap.
            </summary>
            <returns>The android Bitmap.</returns></member>
        <member name="T:Nutiteq.DataSources.CacheTileDataSource">
            <summary>
            A tile data source that loads tiles from another tile data source and caches them.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CacheTileDataSource.SwigCreatePolymorphicInstanceCacheTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CacheTileDataSource.Clear">
            <summary>
            Clear the cache.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CacheTileDataSource.SwigGetClassNameCacheTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.CacheTileDataSource.SwigGetDirectorObjectCacheTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.CacheTileDataSource.Capacity">
            <summary>
            Returns the compressed tile cache capacity.
            </summary></member>
        <member name="T:Nutiteq.Styles.CartoCSSParser">
            <summary>
            A CartoCSS style parser. Geometry and marker styles can be parsed from simple human-readable format.
            Only a subset of the full CartoCSS tags are supported. Also, some Nutiteq-specific tags are added not included
            in original CartoCSS specification.
            Note: parsers return style builder objects instead of style objects.
            This allows easy customization (overriding) of some parameters in the code.
            </summary></member>
        <member name="M:Nutiteq.Styles.CartoCSSParser.CreatePointStyleBuilder(System.String)">
            <summary>
            Read point style parameters from CartoCSS description. The following tags are supported:
            point-size, point-fill, point-opacity, point-file.
            </summary>
            <param name="cartoCSS"> The CartoCSS to parse. For example, "point-size: 20.5; point-fill:#f8f"</param>
            <returns>Point style builder object with parameters set from the specified CartoCSS.</returns></member>
        <member name="M:Nutiteq.Styles.CartoCSSParser.CreateLineStyleBuilder(System.String)">
            <summary>
            Read line style parameters from CartoCSS description. The following tags are supported:
            line-width, line-fill, line-opacity, line-join, line-cap, line-dasharray.
            </summary>
            <param name="cartoCSS"> The CartoCSS to parse. For example, "line-fill:#f0f; line-cap:round, line-dasharray:5,0.5"</param>
            <returns>Line style builder object with parameters set from the specified CartoCSS.</returns></member>
        <member name="M:Nutiteq.Styles.CartoCSSParser.CreatePolygonStyleBuilder(System.String)">
            <summary>
            Read polygon style parameters from CartoCSS description. The following tags are supported:
            polygon-fill, polygon-opacity, line-* (all line tags).
            </summary>
            <param name="cartoCSS"> The CartoCSS to parse. For example, "polygon-fill:#ff00ff; polygon-opacity:0.3"</param>
            <returns>Polygon style builder object with parameters set from the specified CartoCSS.</returns></member>
        <member name="M:Nutiteq.Styles.CartoCSSParser.CreateMarkerStyleBuilder(System.String)">
            <summary>
            Read marker style parameters from CartoCSS description. The following tags are supported:
            marker-width, marker-fill, marker-opacity, marker-file, allow-overlap.
            </summary>
            <param name="cartoCSS"> The CartoCSS to parse. For example, "marker-size:30; marker-file:url('//assets/marker.png')"</param>
            <returns>Marker style builder object with parameters set from the specified CartoCSS.</returns></member>
        <member name="T:Nutiteq.Ui.ClickType">
            <summary>
            Possible click types.
            </summary></member>
        <member name="F:Nutiteq.Ui.ClickType.ClickTypeSingle">
            <summary>
            A click caused by pressing down and then releasing the screen.
            </summary></member>
        <member name="F:Nutiteq.Ui.ClickType.ClickTypeLong">
            <summary>
            A click caused by pressing down but not releasing the screen.
            </summary></member>
        <member name="F:Nutiteq.Ui.ClickType.ClickTypeDouble">
            <summary>
            A click caused by two fast consecutive taps on the screen.
            </summary></member>
        <member name="F:Nutiteq.Ui.ClickType.ClickTypeDual">
            <summary>
            A click caused by two simultaneous taps on the screen.
            </summary></member>
        <member name="T:Nutiteq.Layers.ClusterElementBuilder">
            <summary>
            A special callback interface for building cluster elements from set of existing vector element.
            </summary></member>
        <member name="M:Nutiteq.Layers.ClusterElementBuilder.SwigCreatePolymorphicInstanceClusterElementBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Layers.ClusterElementBuilder.BuildClusterElement(Nutiteq.Core.MapPos,Nutiteq.WrappedCommons.VectorElementVector)">
            <summary>
            Builds new cluster element given position and list of vector elements.
            </summary>
            <param name="mapPos"> The position of the cluster element.</param>
            <param name="elements"> The list of elements that defines the cluster.</param>
            <returns>The created cluster element.</returns></member>
        <member name="M:Nutiteq.Layers.ClusterElementBuilder.SwigGetClassNameClusterElementBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.ClusterElementBuilder.SwigGetDirectorObjectClusterElementBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Layers.ClusteredVectorLayer">
            <summary>
            A vector layer that supports clustering point-type features.
            A Pairwise centroid hierarchical clustering algorithm is used internally.
            </summary></member>
        <member name="M:Nutiteq.Layers.ClusteredVectorLayer.SwigCreatePolymorphicInstanceClusteredVectorLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.Layers.ClusteredVectorLayer.ClusterElementBuilder">
            <summary>
            The ClusterElementBuilder property.
            </summary></member>
        <member name="M:Nutiteq.Layers.ClusteredVectorLayer.#ctor(Nutiteq.DataSources.LocalVectorDataSource,Nutiteq.Layers.ClusterElementBuilder)">
            <summary>
            Constructs a new ClusteredVectorLayer instance from data source and a special callback.
            </summary>
            <param name="dataSource"> The local data source that contains the elements for clustering.</param>
            <param name="clusterElementBuilder"> The callback for creating and customizing cluster elements.</param></member>
        <member name="M:Nutiteq.Layers.ClusteredVectorLayer.getClusterElementBuilderInternal">
            <summary>
            Returns the current callback used for creating cluster elements.
            </summary>
            <returns>The associated callback.</returns></member>
        <member name="M:Nutiteq.Layers.ClusteredVectorLayer.ExpandCluster(Nutiteq.VectorElements.VectorElement,System.Single)">
            <summary>
            Expands or shrinks the given cluster element. In expanded state,
            all elements of the cluster are placed at specified distance from the cluster center.
            </summary>
            <param name="clusterElement"> The cluster element to expand or shrink.</param>
            <param name="px"> The distance (in device-independent pixels) between cluster center and expanded elements. Use 0 to shrink already expanded cluster.</param>
            <returns>True if the element was found and expanded/shrunk. False otherwise.</returns></member>
        <member name="M:Nutiteq.Layers.ClusteredVectorLayer.SwigGetClassNameClusteredVectorLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.ClusteredVectorLayer.SwigGetDirectorObjectClusteredVectorLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Layers.ClusteredVectorLayer.MinimumClusterDistance">
            <summary>
            Returns the current minimum distance between clusters (in device-independent pixels).
            </summary></member>
        <member name="P:Nutiteq.Layers.ClusteredVectorLayer.MaximumClusterZoom">
            <summary>
            Returns the maximum zoom level when clusters are shown. If zoom level is greater, then
            clusters are replaced with individual elements. Default is 24.
            </summary></member>
        <member name="T:Nutiteq.Graphics.Color">
            <summary>
            A color represented in RGBA space, alpha is expected to be non-premultiplied.
            </summary></member>
        <member name="M:Nutiteq.Graphics.Color.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Graphics.Color.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Graphics.Color.#ctor">
            <summary>
            Constructs a completely opaque black color object.
            </summary></member>
        <member name="M:Nutiteq.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a map color object from the red, green, blue and alpha components.
            Alpha component is interpreted as non-premultiplied transparency value,
            thus to make half-transparent green, use Color(0, 255, 0, 128).
            </summary>
            <param name="r"> The red component. Must be between 0 and 255.</param>
            <param name="g"> The green component. Must be between 0 and 255.</param>
            <param name="b"> The blue component. Must be between 0 and 255.</param>
            <param name="a"> The alpha component. Must be between 0 and 255.</param></member>
        <member name="M:Nutiteq.Graphics.Color.#ctor(System.Int32)">
            <summary>
            Constructs a map color object from a 32-bit encoded integer. The format is expected to be ARGB.
            </summary>
            <param name="color"> The color encoded into 32-bit integer as ARGB.</param></member>
        <member name="M:Nutiteq.Graphics.Color.EqualsInternal(Nutiteq.Graphics.Color)">
            <summary>
            Checks for equality between this and another map color.
            </summary>
            <param name="color"> The other map vector.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Graphics.Color.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Graphics.Color.ToString">
            <summary>
            Creates a string representation of this map color, useful for logging.
            </summary>
            <returns>The string representation of this map color.</returns></member>
        <member name="P:Nutiteq.Graphics.Color.ARGB">
            <summary>
            Encodes this map color into 32-bit integer value (ARGB format).
            </summary></member>
        <member name="P:Nutiteq.Graphics.Color.R">
            <summary>
            Returns the red component of this map color.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Color.G">
            <summary>
            Returns the green component of this map color.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Color.B">
            <summary>
            Returns the blue component of this map color.
            </summary></member>
        <member name="P:Nutiteq.Graphics.Color.A">
            <summary>
            Returns the alpha component of this map color.
            </summary></member>
        <member name="T:Nutiteq.Graphics.ColorFormat">
            <summary>
            Possible image formats.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatUnsupported">
            <summary>
            Options for identifiny unsupported image formats.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatGrayscale">
            <summary>
            An image format that describes images with a single color channel.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatGrayscaleAlpha">
            <summary>
            An image format that describes images with two channels, one for color and the other
            for alpha.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatRgb">
            <summary>
            An image format that describes images with three channels, one for each color: red, green and blue.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatRgba">
            <summary>
            An image format that describes images with four channels, one for each color: red, green and blue
            and one for alpha.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatBgra">
            <summary>
            An image format that describes images with four channels, one for each color: blue, green and red
            and one for alpha. This color format will be converted to RGBA.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatRgba4444">
            <summary>
            An image format that describes images with four channels, one for each color: red, green, and blue
            and one for alpha. Each color is only four bits. This color format will be converted to RGBA.
            </summary></member>
        <member name="F:Nutiteq.Graphics.ColorFormat.ColorFormatRgb565">
            <summary>
            An image format that describes images with three channels, one for each color: red, green, and blue.
            Red and blue colors are each packed into 5 bits, green into 6 bits. This color format will be converted to RGB.
            </summary></member>
        <member name="T:Nutiteq.DataSources.CombinedTileDataSource">
            <summary>
            A tile data source that combines two data sources (usually offline and online) and selects tiles
            based on zoom level. All requests below specified zoom level are directed to the first data source
            and all requests at or above specified zoom level are directed to the second data source.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CombinedTileDataSource.SwigCreatePolymorphicInstanceCombinedTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CombinedTileDataSource.#ctor(Nutiteq.DataSources.TileDataSource,Nutiteq.DataSources.TileDataSource,System.Int32)">
            <summary>
            Constructs a combined tile data source object.
            </summary>
            <param name="dataSource1"> First data source that is used if requested tile is below given zoomLevel.</param>
            <param name="dataSource2"> Second data source that is used if requested tile is at or above given zoomLevel.</param>
            <param name="zoomLevel"> Threshold zoom level value.</param></member>
        <member name="M:Nutiteq.DataSources.CombinedTileDataSource.SwigGetClassNameCombinedTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.CombinedTileDataSource.SwigGetDirectorObjectCombinedTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.DataSources.CompressedCacheTileDataSource">
            <summary>
            A tile data source that loads tiles from another tile data source
            and caches them in memory as compressed images. This cache is not persistent, tiles
            will be cleared once the application closes. Default cache capacity is 6MB.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CompressedCacheTileDataSource.SwigCreatePolymorphicInstanceCompressedCacheTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.CompressedCacheTileDataSource.#ctor(Nutiteq.DataSources.TileDataSource)">
            <summary>
            Constructs a CompressedCacheTileDataSource object from tile data source.
            </summary>
            <param name="dataSource"> The datasource to be cached.</param></member>
        <member name="M:Nutiteq.DataSources.CompressedCacheTileDataSource.SwigGetClassNameCompressedCacheTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.CompressedCacheTileDataSource.SwigGetDirectorObjectCompressedCacheTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Renderers.Components.CullState">
            <summary>
            View specific state determined by the culling process. This includes
            convex envelope of the visible area, view frustum, tiles and camera state.
            </summary></member>
        <member name="M:Nutiteq.Renderers.Components.CullState.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Renderers.Components.CullState.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Renderers.Components.CullState.#ctor(Nutiteq.Core.MapEnvelope,Nutiteq.Graphics.ViewState)">
            <summary>
            Constructs a CullState object from an envelope and a viewstate.
            </summary>
            <param name="envelope"> The envelope.</param>
            <param name="viewState"> The view state.</param></member>
        <member name="M:Nutiteq.Renderers.Components.CullState.GetProjectionEnvelope(Nutiteq.Projections.Projection)">
            <summary>
            Returns an envelope for the visible area in given projection coordinates.
            </summary>
            <param name="proj"> The projection for the envelope</param>
            <returns>The envelope for the visible area in the coordinate system of the given projection.</returns></member>
        <member name="P:Nutiteq.Renderers.Components.CullState.ViewState">
            <summary>
            Returns a view state.
            </summary></member>
        <member name="P:Nutiteq.Renderers.Components.CullState.Envelope">
            <summary>
            Returns an envelope for the visible area.
            </summary></member>
        <member name="T:Nutiteq.Geometry.DouglasPeuckerGeometrySimplifier">
            <summary>
            An implementation of Ramer-Douglas-Peucker algorithm for geometry simplification.
            Simplifier works on lines and polygons.
            Simplification is done in two passes - first pass uses fast Radial Distance vertex rejection,
            second pass uses Ramer-Douglas-Peuckerworst algorithm (with worst case quadratic complexity).
            </summary></member>
        <member name="M:Nutiteq.Geometry.DouglasPeuckerGeometrySimplifier.SwigCreatePolymorphicInstanceDouglasPeuckerGeometrySimplifier(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.DouglasPeuckerGeometrySimplifier.#ctor(System.Single)">
            <summary>
            Constructs a new simplifier, given tolerance.
            </summary>
            <param name="tolerance"> The maximum error for simplification. The tolerance value gives maximum error in pixels.</param></member>
        <member name="M:Nutiteq.Geometry.DouglasPeuckerGeometrySimplifier.SwigGetClassNameDouglasPeuckerGeometrySimplifier">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.DouglasPeuckerGeometrySimplifier.SwigGetDirectorObjectDouglasPeuckerGeometrySimplifier">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Projections.EPSG3857">
            <summary>
            EPSG:3857 is a Spherical Mercator projection coordinate system popularized by web services such as Google and later OpenStreetMap.
            Z-coordinate denotes height in meters.
            </summary></member>
        <member name="M:Nutiteq.Projections.EPSG3857.SwigCreatePolymorphicInstanceEPSG3857(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Projections.EPSG3857.SwigGetClassNameEPSG3857">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Projections.EPSG3857.SwigGetDirectorObjectEPSG3857">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Graphics.Frustum">
            <summary>
            A 3D frustum defined by 6 clipping planes.
            </summary></member>
        <member name="M:Nutiteq.Graphics.Frustum.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Graphics.Frustum.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Graphics.Frustum.#ctor">
            <summary>
            Constructs an empty frustum where all corners coordinate are 0.
            </summary></member>
        <member name="M:Nutiteq.Graphics.Frustum.PointInside(Nutiteq.Core.MapPos)">
            <summary>
            Tests if a point is inside with the frustum.
            </summary>
            <param name="point"> The point to be tested.</param>
            <returns>True if the point lies within the frustum.</returns></member>
        <member name="M:Nutiteq.Graphics.Frustum.CircleIntersects(Nutiteq.Core.MapPos,System.Double)">
            <summary>
            Tests if a circle on the z = 0 plane inersects with the frustum.
            </summary>
            <param name="center"> The center position of the circle.</param>
            <param name="radius"> The radius of the circle.</param>
            <returns>True if the circle intersects with the frustum.</returns></member>
        <member name="M:Nutiteq.Graphics.Frustum.SphereIntersects(Nutiteq.Core.MapPos,System.Double)">
            <summary>
            Tests if a sphere inersects with the frustum.
            </summary>
            <param name="center"> The center position of the sphere.</param>
            <param name="radius"> The radius of the sphere.</param>
            <returns>True if the sphere intersects with the frustum.</returns></member>
        <member name="M:Nutiteq.Graphics.Frustum.SquareIntersects(Nutiteq.Core.MapBounds)">
            <summary>
            Tests if an axis aligned square on the z = 0 plane inersects with the frustum.
            </summary>
            <param name="square"> The axis aligned square.</param>
            <returns>True if the square intersects with the frustum.</returns></member>
        <member name="M:Nutiteq.Graphics.Frustum.CuboidIntersects(Nutiteq.Core.MapBounds)">
            <summary>
            Tests if an axis aligned cuboid inersects with the frustum.
            </summary>
            <param name="cuboid"> The axis aligned cuboid.</param>
            <returns>True if the cuboid intersects with the frustum.</returns></member>
        <member name="T:Nutiteq.Geometry.GeoJSONGeometryReader">
            <summary>
            A GeoJSON parser.
            Only Geometry objects are supported, Features and FeatureCollections are not supported.
            </summary></member>
        <member name="P:Nutiteq.Geometry.GeoJSONGeometryReader.TargetProjection">
            <summary>
            The Projection property.
            </summary></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryReader.#ctor">
            <summary>
            Constructs a new GeoJSONGeometryReader object.
            </summary></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryReader.getTargetProjectionInternal">
            <summary>
            Returns the current target projection. If target projection is set, all geometry
            coordinates will be converted from WGS84 to target projection coordinate system.
            </summary>
            <returns>The current target projection or null.</returns></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryReader.setTargetProjectionInternal(Nutiteq.Projections.Projection)">
            <summary>
            Sets the current target projection. If target projection is set, all geometry
            coordinates will be converted from WGS84 to target projection coordinate system.
            </summary>
            <param name="proj"> The new target projection or null.</param></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryReader.ReadGeometry(System.String)">
            <summary>
            Reads geometry from the specified GeoJSON string.
            </summary>
            <param name="geoJSON"> The GeoJSON string to read.</param>
            <returns>The geometry read from the string. Null if reading failed.</returns></member>
        <member name="T:Nutiteq.Geometry.GeoJSONGeometryWriter">
            <summary>
            A GeoJSON writer. Generates human-readable GeoJSON representation of the geometry.
            Supports both 2D and 3D coordinate serialization.
            </summary></member>
        <member name="P:Nutiteq.Geometry.GeoJSONGeometryWriter.SourceProjection">
            <summary>
            The Projection property.
            </summary></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryWriter.#ctor">
            <summary>
            Constructs a new GeoJSONGeometryWriter object with default settings.
            </summary></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryWriter.getSourceProjectionInternal">
            <summary>
            Returns the current source projection. If source projection is set, all geometry
            coordinates will be converted from given coordinate system to WGS84.
            </summary>
            <returns>The current source projection or null.</returns></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryWriter.setSourceProjectionInternal(Nutiteq.Projections.Projection)">
            <summary>
            Sets the current source projection. If source projection is set, all geometry
            coordinates will be converted from given coordinate system to WGS84.
            </summary>
            <param name="proj"> The new source projection or null.</param></member>
        <member name="M:Nutiteq.Geometry.GeoJSONGeometryWriter.WriteGeometry(Nutiteq.Geometry.Geometry)">
            <summary>
            Creates a GeoJSON string corresponding to the specified geometry.
            </summary>
            <param name="geometry"> The geometry to write.</param>
            <returns>The corresponding GeoJSON string.</returns></member>
        <member name="P:Nutiteq.Geometry.GeoJSONGeometryWriter.Z">
            <summary>
            Returns the state of Z coordinate serialization.
            </summary></member>
        <member name="T:Nutiteq.Geometry.Geometry">
            <summary>
            A base class for all geometry types.
            </summary></member>
        <member name="M:Nutiteq.Geometry.Geometry.SwigCreatePolymorphicInstanceGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.Geometry.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Geometry.Geometry.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.Geometry.SwigGetClassNameGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.Geometry.SwigGetDirectorObjectGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Geometry.Geometry.Bounds">
            <summary>
            Returns the minimal bounds for the geometry.
            </summary></member>
        <member name="P:Nutiteq.Geometry.Geometry.CenterPos">
            <summary>
            Returns the center point of the geometry.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.GeometryCollection">
            <summary>
            A collection of multiple geometries that can be displayed on the map.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.GeometryCollection.SwigCreatePolymorphicInstanceGeometryCollection(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.GeometryCollection.Geometry">
            <summary>
            The MultiGeometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.GeometryCollection.#ctor(Nutiteq.Geometry.MultiGeometry,Nutiteq.Styles.GeometryCollectionStyle)">
            <summary>
            Constructs a new GeometryCollection object from multigeometry and style.
            </summary>
            <param name="geometry"> The multigeometry containing possibly points, lines, polygons.</param>
            <param name="style"> The style defining multigeometry rendering.</param></member>
        <member name="M:Nutiteq.VectorElements.GeometryCollection.setGeometryInternal(Nutiteq.Geometry.MultiGeometry)">
            <summary>
            Sets the geometry for this geometry collection.
            </summary>
            <param name="geometry"> The new geometry object.</param></member>
        <member name="M:Nutiteq.VectorElements.GeometryCollection.SwigGetClassNameGeometryCollection">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.GeometryCollection.SwigGetDirectorObjectGeometryCollection">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.GeometryCollection.Style">
            <summary>
            Returns the style of this geometry collection.
            </summary></member>
        <member name="T:Nutiteq.Styles.GeometryCollectionStyle">
            <summary>
            A style for geometry collections. Contains styles for points, lines, polygons.
            </summary></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyle.SwigCreatePolymorphicInstanceGeometryCollectionStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyle.SwigGetClassNameGeometryCollectionStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyle.SwigGetDirectorObjectGeometryCollectionStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.GeometryCollectionStyle.PointStyle">
            <summary>
            Returns the point style.
            </summary></member>
        <member name="P:Nutiteq.Styles.GeometryCollectionStyle.LineStyle">
            <summary>
            Returns the line style.
            </summary></member>
        <member name="P:Nutiteq.Styles.GeometryCollectionStyle.PolygonStyle">
            <summary>
            Returns the polygon style.
            </summary></member>
        <member name="T:Nutiteq.Styles.GeometryCollectionStyleBuilder">
            <summary>
            A builder class for GeometryCollectionStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyleBuilder.SwigCreatePolymorphicInstanceGeometryCollectionStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyleBuilder.#ctor">
            <summary>
            Constructs a GeometryCollectionStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the GeometryCollectionStyle object using previously set parameters.
            </summary>
            <returns>A new GeometryCollectionStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyleBuilder.SwigGetClassNameGeometryCollectionStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.GeometryCollectionStyleBuilder.SwigGetDirectorObjectGeometryCollectionStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.GeometryCollectionStyleBuilder.PointStyle">
            <summary>
            Returns the point style.
            </summary></member>
        <member name="P:Nutiteq.Styles.GeometryCollectionStyleBuilder.LineStyle">
            <summary>
            Returns the line style.
            </summary></member>
        <member name="P:Nutiteq.Styles.GeometryCollectionStyleBuilder.PolygonStyle">
            <summary>
            Returns the polygon style.
            </summary></member>
        <member name="T:Nutiteq.Geometry.GeometrySimplifier">
            <summary>
            Base class for geometry simplifiers.
            </summary></member>
        <member name="M:Nutiteq.Geometry.GeometrySimplifier.SwigCreatePolymorphicInstanceGeometrySimplifier(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.GeometrySimplifier.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Geometry.GeometrySimplifier.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.GeometrySimplifier.Simplify(Nutiteq.Geometry.Geometry,System.Single)">
            <summary>
            Perform the simplification of the given geometry, given relative scale.
            </summary>
            <param name="geometry"> The geometry to simplify.</param>
            <param name="scale"> Relative scale for simplification, this is proportional to 2^zoom.</param>
            <returns>The simplified geometry. If simplification failed, original geometry may be returned.
            Null pointer may be returned if geometry should be discarded.</returns></member>
        <member name="M:Nutiteq.Geometry.GeometrySimplifier.SwigGetClassNameGeometrySimplifier">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.GeometrySimplifier.SwigGetDirectorObjectGeometrySimplifier">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.WrappedCommons.GeometryVector.GeometryVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.DataSources.HTTPTileDataSource">
            <summary>
            A tile data source that loads tiles using a HTTP connection.
            The requests are generated using a template scheme, where tags in the baseURL string are replaced with actual values.
            The following tags are supported: zoom, x, y, xflipped, yflipped, quadkey.
            </summary>
            <summary>
            For example, if baseURL = "http://tile.openstreetmap.org/{zoom}/{x}/{y}.png" and the requested tile has zoom = 2,
            x = 1 and y = 3, then the tile will be loaded from the following URL: "http://tile.openstreetmap.org/2/1/3.png".
            </summary></member>
        <member name="M:Nutiteq.DataSources.HTTPTileDataSource.SwigCreatePolymorphicInstanceHTTPTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.HTTPTileDataSource.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a HTTPTileDataSource object.
            </summary>
            <param name="minZoom"> The minimum zoom level supported by this data source.</param>
            <param name="maxZoom"> The maximum zoom level supported by this data source.</param>
            <param name="baseURL"> The base URL containing tags (for example, "http://tile.openstreetmap.org/{zoom}/{x}/{y}.png").</param></member>
        <member name="M:Nutiteq.DataSources.HTTPTileDataSource.GetHTTPHeaders">
            <summary>
            Returns the current set of HTTP headers used. Initially this set is empty and can be changed with setHTTPHeaders.
            </summary>
            @return The current set of custom HTTP headers.</member>
        <member name="M:Nutiteq.DataSources.HTTPTileDataSource.SetHTTPHeaders(Nutiteq.WrappedCommons.StringMap)">
            <summary>
            Sets HTTP headers for all requests. Calling this method will invalidate the datasource and
            all layers using this data source will be refreshed.
            </summary>
            <param name="headers"> A map of HTTP headers that will be used in subsequent requests.</param></member>
        <member name="M:Nutiteq.DataSources.HTTPTileDataSource.SwigGetClassNameHTTPTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.HTTPTileDataSource.SwigGetDirectorObjectHTTPTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.HTTPTileDataSource.BaseURL">
            <summary>
            Returns the base URL template containing tags.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Label">
            <summary>
            An abstract billboard element with a dynamically drawn bitmap that can be displayed on the map.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Label.SwigCreatePolymorphicInstanceLabel(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Label.Style">
            <summary>
            The LabelStyle property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Label.#ctor(Nutiteq.VectorElements.Billboard,Nutiteq.Styles.LabelStyle)">
            <summary>
            Constructs an abstract Label object with the specified style and attaches it to a billboard element.
            </summary>
            <param name="baseBillboard"> The billboard this label will be attached to.</param>
            <param name="style"> The style that defines what this label looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Label.#ctor(Nutiteq.Geometry.Geometry,Nutiteq.Styles.LabelStyle)">
            <summary>
            Constructs an abstract Label object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this label.</param>
            <param name="style"> The style that defines what this label looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Label.#ctor(Nutiteq.Core.MapPos,Nutiteq.Styles.LabelStyle)">
            <summary>
            Constructs an abstract Label object from a map position and a style.
            </summary>
            <param name="pos"> The map position that defines the location of this label.</param>
            <param name="style"> The style that defines what this label looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Label.DrawBitmap(System.Single)">
            <summary>
            Draws a custom bitmap for this label that will be used for drawing the label on the map.
            The method is called each time the label gets reloaded internally.
            </summary>
            <param name="dpToPX"> The value used for converting display independent pixels (dp) to pixels (px).</param>
            <returns>The custom label bitmap.</returns></member>
        <member name="M:Nutiteq.VectorElements.Label.getStyleInternal">
            <summary>
            Returns the style of this label.
            </summary>
            <returns>The style that defines what this label looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.Label.setStyleInternal(Nutiteq.Styles.LabelStyle)">
            <summary>
            Sets the style for this label.
            </summary>
            <returns>The new style that defines what this marker looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.Label.SwigGetClassNameLabel">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Label.SwigGetDirectorObjectLabel">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Styles.LabelStyle">
            <summary>
            A style for labels. Contains attributes for configuring how the label is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.LabelStyle.SwigCreatePolymorphicInstanceLabelStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.LabelStyle.#ctor(Nutiteq.Graphics.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single,System.Boolean,Nutiteq.Styles.BillboardOrientation,Nutiteq.Styles.BillboardScaling)">
            <summary>
            Constructs a LabelStyle object from various parameters. Instantiating the object directly is
            not recommended, LabelStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the label.</param>
            <param name="attachAnchorPointX"> The horizontal attaching anchor point for the label.</param>
            <param name="attachAnchorPointY"> The vertical attaching anchor point for the label.</param>
            <param name="causesOverlap"> The causes overlap flag for the label.</param>
            <param name="hideIfOverlapped"> The hide if overlapped flag for the label.</param>
            <param name="horizontalOffset"> The horizontal offset for the label.</param>
            <param name="verticalOffset"> The vertical offset for the label.</param>
            <param name="placementPriority"> The placement priority for the label.</param>
            <param name="scaleWithDPI"> The scale with DPI flag for the label.</param>
            <param name="anchorPointX"> The horizontal anchor point for the label.</param>
            <param name="anchorPointY"> The vertical anchor point for the label.</param>
            <param name="flippable"> The fliappble flag for the label.</param>
            <param name="orientationMode"> The orientation mode for the label.</param>
            <param name="scalingMode"> The scaling mode for the label.</param></member>
        <member name="M:Nutiteq.Styles.LabelStyle.SwigGetClassNameLabelStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.LabelStyle.SwigGetDirectorObjectLabelStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.LabelStyle.OrientationMode">
            <summary>
            Returns the orientation mode of the label.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyle.ScalingMode">
            <summary>
            Returns the scaling mode of the label.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyle.Flippable">
            <summary>
            Returns the state of the flippable flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyle.AnchorPointX">
            <summary>
            Returns the horizontal anchor point of the label.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyle.AnchorPointY">
            <summary>
            Returns the vertical anchor point of the label.
            </summary></member>
        <member name="T:Nutiteq.Styles.LabelStyleBuilder">
            <summary>
            A builder class for LabelStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.LabelStyleBuilder.SwigCreatePolymorphicInstanceLabelStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.LabelStyleBuilder.#ctor">
            <summary>
            Constructs a LabelStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.LabelStyleBuilder.SetAnchorPoint(System.Single,System.Single)">
            <summary>
            Sets the anchor point for the label. Values will be clamped to [-1, 1] range.
            </summary>
            <param name="anchorPointX"> The new horizontal anchor point for the label. -1 means the left side,
            0 the center and 1 the right side of the label. The default is 0.</param>
            <param name="anchorPointY"> The vertical anchor point for the label. -1 means the bottom,
            0 the center and 1 the top of the label. The default is -1.</param></member>
        <member name="M:Nutiteq.Styles.LabelStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the LabelStyle object using previously set parameters.
            </summary>
            <returns>A new LabelStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.LabelStyleBuilder.SwigGetClassNameLabelStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.LabelStyleBuilder.SwigGetDirectorObjectLabelStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.LabelStyleBuilder.OrientationMode">
            <summary>
            Returns the orientation mode of the label.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyleBuilder.ScalingMode">
            <summary>
            Returns the scaling mode of the label.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyleBuilder.Flippable">
            <summary>
            Returns the state of the flippable flag.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyleBuilder.AnchorPointX">
            <summary>
            Returns the horizontal anchor point of the label.
            </summary></member>
        <member name="P:Nutiteq.Styles.LabelStyleBuilder.AnchorPointY">
            <summary>
            Returns the vertical anchor point of the label.
            </summary></member>
        <member name="T:Nutiteq.Layers.Layer">
            <summary>
            An abstract base class for all layers.
            </summary></member>
        <member name="M:Nutiteq.Layers.Layer.SwigCreatePolymorphicInstanceLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Layers.Layer.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Layers.Layer.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Layers.Layer.IsUpdateInProgress">
            <summary>
            Tests whether this layer is being currently updated.
            </summary>
            <returns>True when the layer is being updated or false when the layer is in steady state.</returns></member>
        <member name="M:Nutiteq.Layers.Layer.Update(Nutiteq.Renderers.Components.CullState)">
            <summary>
            Updates the layer using new visibility information. This method is periodically called when the map view moves.
            The visibilty info is saved, so the data can be refreshed later.
            </summary>
            <param name="cullState"> The new visibilty information.</param></member>
        <member name="M:Nutiteq.Layers.Layer.Refresh">
            <summary>
            Refreshes the layer using old stored visibility information. This method might be called if some of the layer data
            changes.
            </summary></member>
        <member name="M:Nutiteq.Layers.Layer.SwigGetClassNameLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.Layer.SwigGetDirectorObjectLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Layers.Layer.Visible">
            <summary>
            Returns the visibility of this layer.
            </summary></member>
        <member name="P:Nutiteq.Layers.Layer.Priority">
            <summary>
            Returns the layer task priority of this layer.
            </summary></member>
        <member name="P:Nutiteq.Layers.Layer.VisibleZoomRange">
            <summary>
            Returns the visible zoom range of this layer.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.LayerVector.LayerVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Layers.Layers">
            <summary>
            Container for all raster and vector layers of the map view.
            </summary>
            <summary>
            The order in which layers are added is important for vector elements like Points, Lines
            and Polygons. For these elements the layer ordering defines their draw order.
            Other elements like NMLModels and Polygon3Ds are z ordered and are drawn using the depth buffer.
            For Billboard elements like Markers and Labels, the layer ordering is unimportant, because
            they will be sorted from back to front and drawn in that order on top of all other vector elements.
            </summary></member>
        <member name="M:Nutiteq.Layers.Layers.Get(System.Int32)">
            <summary>
            Returns the layer at the specified index.
            </summary>
            <param name="index"> The layer index to return. Must be between 0 and count (exclusive).</param>
            <returns>The layer at the specified index.</returns></member>
        <member name="M:Nutiteq.Layers.Layers.Insert(System.Int32,Nutiteq.Layers.Layer)">
            <summary>
            Inserts a new layer at the specified position.
            All previous layers starting from this index will be moved to the next position.
            </summary>
            <param name="index"> The layer index. Must be between 0 and count (inclusive).</param>
            <param name="layer"> The new layer.</param></member>
        <member name="M:Nutiteq.Layers.Layers.Add(Nutiteq.Layers.Layer)">
            <summary>
            Adds a new layer to the layer stack. The new layer will be the last (and topmost) layer.
            </summary>
            <param name="layer"> The layer to be added.</param></member>
        <member name="M:Nutiteq.Layers.Layers.Remove(Nutiteq.Layers.Layer)">
            <summary>
            Removes a layer to the layer stack.
            </summary>
            <param name="layer"> The layer to be removed.</param>
            <returns>True if the layer was removed. False otherwise (layer was not found).</returns></member>
        <member name="M:Nutiteq.Layers.Layers.GetLayers">
            <summary>
            Returns a list of layers. The layers are in the order in which they were added.
            </summary>
            <returns>A vector of all previously added layers.</returns></member>
        <member name="P:Nutiteq.Layers.Layers.Count">
            <summary>
            Returns the current layer count.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Line">
            <summary>
            A geometric line string that can be displayed on the map.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Line.SwigCreatePolymorphicInstanceLine(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Line.Geometry">
            <summary>
            The LineGeometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Line.#ctor(Nutiteq.Geometry.LineGeometry,Nutiteq.Styles.LineStyle)">
            <summary>
            Constructs a Line object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this line.</param>
            <param name="style"> The style that defines what this line looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Line.#ctor(Nutiteq.WrappedCommons.MapPosVector,Nutiteq.Styles.LineStyle)">
            <summary>
            Constructs a Line object from a vector of map positions and a style.
            </summary>
            <param name="poses"> The vector of map positions that defines the location of this line.</param>
            <param name="style"> The style that defines what this line looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Line.setGeometryInternal(Nutiteq.Geometry.LineGeometry)">
            <summary>
            Sets the location for this line.
            </summary>
            <param name="geometry"> The new geometry object that defines the location of this line.</param></member>
        <member name="M:Nutiteq.VectorElements.Line.GetPoses">
            <summary>
            Returns the vertices that define this line.
            </summary>
            <returns>The vector of map positions that defines this line.</returns></member>
        <member name="M:Nutiteq.VectorElements.Line.SetPoses(Nutiteq.WrappedCommons.MapPosVector)">
            <summary>
            Sets the vertices that define this line.
            </summary>
            <param name="poses"> The new vector of map positions that defines this line.</param></member>
        <member name="M:Nutiteq.VectorElements.Line.SwigGetClassNameLine">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Line.SwigGetDirectorObjectLine">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Line.Style">
            <summary>
            Returns the style of this line.
            </summary></member>
        <member name="T:Nutiteq.Styles.LineEndType">
            <summary>
            Possible styles in which line end points are drawn.
            </summary></member>
        <member name="F:Nutiteq.Styles.LineEndType.LineEndTypeStraight">
            <summary>
            No line end points are drawn, line end with a straight line.
            </summary></member>
        <member name="F:Nutiteq.Styles.LineEndType.LineEndTypeRound">
            <summary>
            Line end points are drawn as half circles.
            </summary></member>
        <member name="T:Nutiteq.Geometry.LineGeometry">
            <summary>
            Line geometry defined by a list of map positions.
            </summary></member>
        <member name="M:Nutiteq.Geometry.LineGeometry.SwigCreatePolymorphicInstanceLineGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.LineGeometry.#ctor(Nutiteq.WrappedCommons.MapPosVector)">
            <summary>
            Constructs a new LineGeometry object from a map position list.
            </summary></member>
        <member name="M:Nutiteq.Geometry.LineGeometry.SwigGetClassNameLineGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.LineGeometry.SwigGetDirectorObjectLineGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Geometry.LineGeometry.Poses">
            <summary>
            Returns the list of of map positions defining the line.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.LineGeometryVector.LineGeometryVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Styles.LineJointType">
            <summary>
            Possible styles in which line segments are connected with each other.
            </summary></member>
        <member name="F:Nutiteq.Styles.LineJointType.LineJointTypeNone">
            <summary>
            Line segments are not connected with each other. The fastest and ugliest.
            </summary></member>
        <member name="F:Nutiteq.Styles.LineJointType.LineJointTypeStraight">
            <summary>
            Line segments are connected with each other using straight line connectors. Fast
            but results in an unnatural line.
            </summary></member>
        <member name="F:Nutiteq.Styles.LineJointType.LineJointTypeRound">
            <summary>
            Line segments are connected with each other using circle sectors resulting in
            round corners. Slowest and prettiest.
            </summary></member>
        <member name="T:Nutiteq.Styles.LineStyle">
            <summary>
            A style for lines. Contains attributes for configuring how the line is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.LineStyle.SwigCreatePolymorphicInstanceLineStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.LineStyle.#ctor(Nutiteq.Graphics.Color,Nutiteq.Graphics.Bitmap,System.Single,Nutiteq.Styles.LineEndType,Nutiteq.Styles.LineJointType,System.Single,System.Single)">
            <summary>
            Constructs a LineStyle object from various parameters. Instantiating the object directly is
            not recommended, LineStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the line.</param>
            <param name="bitmap"> The bitmap for the line.</param>
            <param name="clickWidth"> The width of the line used for click detection.</param>
            <param name="lineEndType"> The line's end point type.</param>
            <param name="lineJointType"> The joint type for the line.</param>
            <param name="stretchFactor"> The color for the line.</param>
            <param name="width"> The width for the line.</param></member>
        <member name="M:Nutiteq.Styles.LineStyle.SwigGetClassNameLineStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.LineStyle.SwigGetDirectorObjectLineStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.LineStyle.Width">
            <summary>
            Returns the width of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyle.ClickWidth">
            <summary>
            Returns the width of the line used for click detection.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyle.StretchFactor">
            <summary>
            Returns the stretching factor of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyle.LineJointType">
            <summary>
            Returns the joint type of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyle.LineEndType">
            <summary>
            Returns the end point type of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyle.Bitmap">
            <summary>
            Returns the bitmap of the line.
            </summary></member>
        <member name="T:Nutiteq.Styles.LineStyleBuilder">
            <summary>
            A builder class for LineStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.LineStyleBuilder.SwigCreatePolymorphicInstanceLineStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.LineStyleBuilder.#ctor">
            <summary>
            Constructs a LineStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.LineStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the LineStyle object using previously set parameters.
            </summary>
            <returns>A new LineStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.LineStyleBuilder.SwigGetClassNameLineStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.LineStyleBuilder.SwigGetDirectorObjectLineStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.LineStyleBuilder.Width">
            <summary>
            Returns the width of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyleBuilder.ClickWidth">
            <summary>
            Returns the width of the line used for click detection.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyleBuilder.StretchFactor">
            <summary>
            Returns the stretch factor of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyleBuilder.LineJointType">
            <summary>
            Returns the joint type of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyleBuilder.LineEndType">
            <summary>
            Returns the end point type of the line.
            </summary></member>
        <member name="P:Nutiteq.Styles.LineStyleBuilder.Bitmap">
            <summary>
            Returns the bitmap of the line.
            </summary></member>
        <member name="T:Nutiteq.DataSources.LocalSpatialIndexType">
            <summary>
            Spatial index type for local data source.
            </summary></member>
        <member name="F:Nutiteq.DataSources.LocalSpatialIndexType.LocalSpatialIndexTypeNull">
            <summary>
            Null index, fastest if few elements are used. No element culling is performed.
            </summary></member>
        <member name="F:Nutiteq.DataSources.LocalSpatialIndexType.LocalSpatialIndexTypeKdtree">
            <summary>
            K-d tree index, element culling is exact and fast.
            </summary></member>
        <member name="T:Nutiteq.DataSources.LocalVectorDataSource">
            <summary>
            A modifiable vector data source that keeps all the elements in the local memory.
            Optionally vector elements can be kept in a spatial index and only the visible elements get rendered.
            There can be a small delay before previously invisible elements become visible after view changes.
            This makes it suitable for cases where there are a large number of static vector elements.
            </summary>
            <summary>
            The draw order of vector elements within the data source is undefined.
            </summary></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.SwigCreatePolymorphicInstanceLocalVectorDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.DataSources.LocalVectorDataSource.GeometrySimplifier">
            <summary>
            The GeometrySimplifier property.
            </summary></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.#ctor(Nutiteq.Projections.Projection)">
            <summary>
            Constructs an LocalVectorDataSource object with no spatial index.
            </summary>
            <param name="projection"> The projection used by this data source.</param></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.#ctor(Nutiteq.Projections.Projection,Nutiteq.DataSources.LocalSpatialIndexType)">
            <summary>
            Constructs an LocalVectorDataSource object with specified spatial index.
            </summary>
            <param name="projection"> The projection used by this data source.</param>
            <param name="spatialIndexType"> The spatial index type to use.</param></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.GetAll">
            <summary>
            Returns all vector elements added to this data source using add() and addAll() methods.
            </summary>
            <returns>A vector containing all the vector elements in this data source.</returns></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.SetAll(Nutiteq.WrappedCommons.VectorElementVector)">
            <summary>
            Replaces all vector elements in the data source with the given list of vector elements.
            </summary>
            <param name="elements"> The list of new vector elements</param></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.Add(Nutiteq.VectorElements.VectorElement)">
            <summary>
            Adds a vector element to the data source. The vector element's coordinates are expected to be
            in the data source's projection's coordinate system. The order in which the elements are added has
            no effect on the order they get rendered.
            </summary>
            <param name="element"> The vector element to be added.</param></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.AddAll(Nutiteq.WrappedCommons.VectorElementVector)">
            <summary>
            Adds multiple vector elements to the data source. The vector elements' coordinates are expected to be
            in the data source's projection's coordinate system. The order in which the elements are added has
            no effect on the order they get rendered.
            </summary>
            <param name="elements"> A vector of vector elements to be added.</param></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.Remove(Nutiteq.VectorElements.VectorElement)">
            <summary>
            Removes a vector element from the data source.
            </summary>
            <param name="elementToRemove"> The vector element to be removed.</param>
            <returns>True if the vector element existed in the data source.</returns></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.RemoveAll">
            <summary>
            Removes all vector elements from the data source.
            </summary>
            <returns>The removed vector elements.</returns></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.getGeometrySimplifierInternal">
            <summary>
            Returns the active geometry simplifier of the data source.
            </summary>
            <returns>The current geometry simplifier (can be null)</returns></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.setGeometrySimplifierInternal(Nutiteq.Geometry.GeometrySimplifier)">
            <summary>
            Attaches geometry simplifier to the data source. If the specified simplifier is null, detaches any active simplifier.
            </summary>
            <param name="simplifier"> The new geometry simplifier to use (can be null).</param></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.SwigGetClassNameLocalVectorDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.LocalVectorDataSource.SwigGetDirectorObjectLocalVectorDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.LocalVectorDataSource.DataExtent">
            <summary>
            Returns the extent of this data source. Extent is the minimal bounding box encompassing all the elements.
            </summary></member>
        <member name="T:Nutiteq.Utils.Log">
            <summary>
            A diagnostic log for various SDK events.
            </summary></member>
        <member name="M:Nutiteq.Utils.Log.Fatal(System.String)">
            <summary>
            Logs specified fatal error message and terminates.
            </summary>
            <param name="text"> The text to log.</param></member>
        <member name="M:Nutiteq.Utils.Log.Error(System.String)">
            <summary>
            Logs specified error message (if error logging is enabled).
            </summary>
            <param name="text"> The text to log.</param></member>
        <member name="M:Nutiteq.Utils.Log.Warn(System.String)">
            <summary>
            Logs specified warning message (if warning logging is enabled).
            </summary>
            <param name="text"> The text to log.</param></member>
        <member name="M:Nutiteq.Utils.Log.Info(System.String)">
            <summary>
            Logs specified info message (if info logging is enabled).
            </summary>
            <param name="text"> The text to log.</param></member>
        <member name="M:Nutiteq.Utils.Log.Debug(System.String)">
            <summary>
            Logs specified debug message (if debug logging is enabled).
            </summary>
            <param name="text"> The text to log.</param></member>
        <member name="P:Nutiteq.Utils.Log.ShowError">
            <summary>
            Returns the state of error logging.
            </summary></member>
        <member name="P:Nutiteq.Utils.Log.ShowWarn">
            <summary>
            Returns the state of warning logging.
            </summary></member>
        <member name="P:Nutiteq.Utils.Log.ShowInfo">
            <summary>
            Returns the state of general info logging.
            </summary></member>
        <member name="P:Nutiteq.Utils.Log.ShowDebug">
            <summary>
            Returns the state of internal debug message logging.
            </summary></member>
        <member name="P:Nutiteq.Utils.Log.Tag">
            <summary>
            Returns the tag for the log events.
            </summary></member>
        <member name="T:Nutiteq.DataSources.MBTilesScheme">
            <summary>
            MBTiles tile schemes.
            </summary></member>
        <member name="F:Nutiteq.DataSources.MBTilesScheme.MbtilesSchemeTms">
            <summary>
            The default scheme. Vertical coordinate is not flipped.
            </summary></member>
        <member name="F:Nutiteq.DataSources.MBTilesScheme.MbtilesSchemeXyz">
            <summary>
            Alternative to TMS scheme. Vertical coordinate is flipped.
            </summary></member>
        <member name="T:Nutiteq.DataSources.MBTilesTileDataSource">
            <summary>
            A tile data source that loads tiles from a local Sqlite database.
            The database must contain table "tiles" with the following fields:
            "zoom_level" (tile zoom level), "tile_column" (tile x coordinate),
            "tile_row" (tile y coordinate), "tile_data" (compressed tile image).
            </summary></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.SwigCreatePolymorphicInstanceMBTilesTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.#ctor(System.String)">
            <summary>
            Constructs a MBTilesTileDataSource object. TMS tile scheme is used,
            min and max zoom levels are automatically detected.
            </summary>
            <param name="path"> The path to the local Sqlite database file.</param></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a MBTilesTileDataSource object. TMS tile scheme is used.
            </summary>
            <param name="minZoom"> The minimum zoom level supported by this data source.</param>
            <param name="maxZoom"> The maximum zoom level supported by this data source.</param>
            <param name="path"> The path to the local Sqlite database file.</param></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.#ctor(System.Int32,System.Int32,System.String,Nutiteq.DataSources.MBTilesScheme)">
            <summary>
            Constructs a MBTilesTileDataSource object with specified tile scheme.
            </summary>
            <param name="minZoom"> The minimum zoom level supported by this data source.</param>
            <param name="maxZoom"> The maximum zoom level supported by this data source.</param>
            <param name="path"> The path to the local Sqlite database file.</param>
            <param name="scheme"> Tile scheme to use.</param></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.GetMetaData">
            <summary>
            Get data source metadata information.
            Possible parameters can be found in MBTiles specification.
            </summary>
            <returns>Map containing meta data information (parameter names mapped to parameter values).</returns></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.SwigGetClassNameMBTilesTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.MBTilesTileDataSource.SwigGetDirectorObjectMBTilesTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.MBTilesTileDataSource.DataExtent">
            <summary>
            Returns the extent of this data source. Extent is the minimal bounding box encompassing all the tiles at maximum zoom level.
            </summary></member>
        <member name="T:Nutiteq.VectorTiles.MBVectorTileDecoder">
            <summary>
            Decoder for vector tiles in MapBox format.
            </summary></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SwigCreatePolymorphicInstanceMBVectorTileDecoder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.#ctor(Nutiteq.VectorTiles.MBVectorTileStyleSet)">
            <summary>
            Constructs decoder for MapBox vector tiles based on specified style set.
            If the style set contains multiple styles, the first one (based on lexicographical order) from the root folder is chosen as the current style.
            </summary>
            <param name="styleSet"> Style set for the tiles.</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.#ctor(Nutiteq.VectorTiles.MBVectorTileStyleSet,System.String)">
            <summary>
            Constructs decoder for MapBox vector tiles based on specified style set.
            Specified style is selected as the current style.
            </summary>
            <param name="styleSet"> Style set for the tiles.</param>
            <param name="styleName"> Style to select.</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SetCurrentStyle(System.String)">
            <summary>
            Select current style by style name. The style must exist in the
            style set container specified in the constructor as an xml file.
            This call will also reset style-related parameters, like geometry and billboard scales of the decoder.
            </summary>
            <param name="styleName"> style to use</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SetStyleParameter(System.String,System.Boolean)">
            <summary>
            Sets a style parameter to specified boolean value.
            The style parameter must be declared in the current style.
            </summary>
            <param name="param"> The parameter to set.</param>
            <param name="value"> The value for the parameter.</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SetStyleParameter(System.String,System.Int64)">
            <summary>
            Sets a style parameter to specified integer value.
            The style parameter must be declared in the current style.
            </summary>
            <param name="param"> The parameter to set.</param>
            <param name="value"> The value for the parameter.</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SetStyleParameter(System.String,System.Double)">
            <summary>
            Sets a style parameter to specified floating point value.
            The style parameter must be declared in the current style.
            </summary>
            <param name="param"> The parameter to set.</param>
            <param name="value"> The value for the parameter.</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SetStyleParameter(System.String,System.String)">
            <summary>
            Sets a style parameter to specified string value.
            The style parameter must be declared in the current style.
            </summary>
            <param name="param"> The parameter to set.</param>
            <param name="value"> The value for the parameter.</param></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SwigGetClassNameMBVectorTileDecoder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileDecoder.SwigGetDirectorObjectMBVectorTileDecoder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorTiles.MBVectorTileDecoder.CurrentStyleName">
            <summary>
            Returns the current style name.
            </summary></member>
        <member name="T:Nutiteq.VectorTiles.MBVectorTileStyleSet">
            <summary>
            Style set for MapBox vector tiles. Style set is a read-only key-value containers,
            their contents should not be read or used at application level.
            </summary></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileStyleSet.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileStyleSet.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.VectorTiles.MBVectorTileStyleSet.#ctor(Nutiteq.WrappedCommons.UnsignedCharVector)">
            <summary>
            Constructs a styleset from byte vector.
            </summary>
            <param name="data"> Opaque byte vector describing the style set.</param></member>
        <member name="T:Nutiteq.Core.MapBounds">
            <summary>
            A container class that defines an axis aligned cuboid on the map using minimum and maximum map positions.
            Valid ranges for map bounds depend on the projection used.
            </summary></member>
        <member name="M:Nutiteq.Core.MapBounds.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.#ctor">
            <summary>
            Constructs an empty MapBounds object. The coordinates of the minimum map position will be
            set to positive infinity and the coordinates of the maximum map position will be
            set to negative infinity.
            </summary></member>
        <member name="M:Nutiteq.Core.MapBounds.#ctor(Nutiteq.Core.MapPos,Nutiteq.Core.MapPos)">
            <summary>
            Constructs a MapBounds object from a minimum and maximum map position. If a coordinate of the
            minimum map positon is larger than the same coordinate of the maximum map position then those
            coordinates will be swapped.
            </summary>
            <param name="min"> The minimum map position.</param>
            <param name="max"> The maximum map position.</param></member>
        <member name="M:Nutiteq.Core.MapBounds.EqualsInternal(Nutiteq.Core.MapBounds)">
            <summary>
            Checks for equality between this and another map bounds object.
            </summary>
            <param name="mapBounds"> The other map bounds object.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.Contains(Nutiteq.Core.MapPos)">
            <summary>
            Tests whether this map bounds object contains a map position.
            </summary>
            <param name="pos"> The map position.</param>
            <returns>True if this map bounds object contains the map position.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.Contains(Nutiteq.Core.MapBounds)">
            <summary>
            Tests whether this map bounds object contains a another map bounds object.
            </summary>
            <param name="bounds"> The other map bounds object.</param>
            <returns>True if this map bounds object contains the other map bounds object.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.Intersects(Nutiteq.Core.MapBounds)">
            <summary>
            Tests whether this map bounds object intersects with a another map bounds object.
            </summary>
            <param name="bounds"> The other map bounds object.</param>
            <returns>True if this map bounds object intersects with the other map bounds object.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapBounds.ToString">
            <summary>
            Creates a string representation of this map bounds object, useful for logging.
            </summary>
            <returns>The string representation of this map bounds object.</returns></member>
        <member name="P:Nutiteq.Core.MapBounds.Max">
            <summary>
            Returns the maximum map position of this map envelope object.
            </summary></member>
        <member name="P:Nutiteq.Core.MapBounds.Center">
            <summary>
            Calculates the center map position of this map envelope object.
            </summary></member>
        <member name="P:Nutiteq.Core.MapBounds.Min">
            <summary>
            Returns the minimum map position of this map envelope object.
            </summary></member>
        <member name="P:Nutiteq.Core.MapBounds.Delta">
            <summary>
            Calculates the difference vector between the maximum and minimum map positions of this map bounds object.
            </summary></member>
        <member name="T:Nutiteq.Ui.MapClickInfo">
            <summary>
            A container class that provies information about a click performed on
            an empty area of the map.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapClickInfo.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Ui.MapClickInfo.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="P:Nutiteq.Ui.MapClickInfo.ClickPos">
            <summary>
            Returns the click position.
            </summary></member>
        <member name="P:Nutiteq.Ui.MapClickInfo.ClickType">
            <summary>
            Returns the click type.
            </summary></member>
        <member name="T:Nutiteq.Core.MapEnvelope">
            <summary>
            A bounding area on the map. Can be defined by a map bounds object or by a convex bounding polygon.
            This class is intended for conservative object area estimation and fast intersection testing.
            </summary></member>
        <member name="M:Nutiteq.Core.MapEnvelope.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.MapEnvelope.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapEnvelope.#ctor">
            <summary>
            Constructs an empty MapEnvelope object. Nothing is contained within
            this envelope.
            </summary></member>
        <member name="M:Nutiteq.Core.MapEnvelope.#ctor(Nutiteq.Core.MapBounds)">
            <summary>
            Constructs a MapEnvelope object using map bounds.
            </summary></member>
        <member name="M:Nutiteq.Core.MapEnvelope.#ctor(Nutiteq.WrappedCommons.MapPosVector)">
            <summary>
            Constructs a MapEnvelope object from a convex bounding polygon.
            </summary></member>
        <member name="M:Nutiteq.Core.MapEnvelope.EqualsInternal(Nutiteq.Core.MapEnvelope)">
            <summary>
            Checks for equality between this and another envelope.
            </summary>
            <param name="envelope"> The other map envelope object.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.MapEnvelope.Contains(Nutiteq.Core.MapEnvelope)">
            <summary>
            Tests whether this map envelope contains another map envelope.
            </summary>
            <param name="envelope"> The other map envelope.</param>
            <returns>True if this map envelope contains the other map envelope.</returns></member>
        <member name="M:Nutiteq.Core.MapEnvelope.Intersects(Nutiteq.Core.MapEnvelope)">
            <summary>
            Tests whether this map envelope intersects with another map envelope.
            </summary>
            <param name="envelope"> The other map envelope.</param>
            <returns>True if this map envelope intersects the other map envelope.</returns></member>
        <member name="M:Nutiteq.Core.MapEnvelope.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapEnvelope.ToString">
            <summary>
            Creates a string representation of this map envelope, useful for logging.
            </summary>
            <returns>The string representation of this map envelope.</returns></member>
        <member name="P:Nutiteq.Core.MapEnvelope.Bounds">
            <summary>
            Returns the map bounds of this map envelope.
            </summary></member>
        <member name="P:Nutiteq.Core.MapEnvelope.ConvexHull">
            <summary>
            Returns the convex hull of this map envelope.
            </summary></member>
        <member name="T:Nutiteq.Ui.MapEventListener">
            <summary>
            Listener for events like map and vector element clicks etc.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.SwigCreatePolymorphicInstanceMapEventListener(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnMapIdle">
            <summary>
            Listener method that gets called at the end of the rendering process when the
            map view needs no further refreshing.
            Note that there can still be background processes (tile loading) that may change
            the map view but these may take long time.
            This method is called from GL renderer thread, not from main thread.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnMapMoved">
            <summary>
            Listener method that gets called when the map is panned, rotated, tilted or zoomed.
            The thread this method is called from may vary.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnMapStable">
            <summary>
            Listener method that gets called when map is in 'stable' state - map animations have finished,
            user has lifted fingers from the screen. This method is similar to onMapIdle, but is called less
            frequently and takes account touch state.
            The thread this method is called from may vary.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnMapClicked(Nutiteq.Ui.MapClickInfo)">
            <summary>
            Listener method that gets called when a click is performed on an empty area of the map.
            This method will NOT be called from the main thread.
            </summary>
            <param name="mapClickInfo"> A container that provides information about the click.</param></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnVectorElementClicked(Nutiteq.Ui.VectorElementsClickInfo)">
            <summary>
            Listener method that gets called when a click is performed on a vector element.
            If there are multiple vector elements that are located at the click position, then the
            results will be sorted by their distance to the camera. The closest element will be the first one
            in the list. This method will NOT be called from the main thread.
            </summary>
            <param name="vectorElementsClickInfo"> A container that provides information about the click.</param></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnBeforeDrawFrame">
            <summary>
            Listener method that gets called at the start of the rendering process.
            The method can be used to synchronize vector elements with renderer state, for example
            to force marker to be always at the center of the screen (focus point).
            This method is called from GL renderer thread, not from main thread.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.OnAfterDrawFrame">
            <summary>
            Listener method that gets called at the end of the rendering process.
            This method is called from GL renderer thread, not from main thread.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapEventListener.SwigGetClassNameMapEventListener">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Ui.MapEventListener.SwigGetDirectorObjectMapEventListener">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Core.MapPos">
            <summary>
            A double precision map position defined using three coordinates. X and y coordinates denote positions on the map,
            while z coordinate is height from the ground plane. Actual units for x, y and z depend on map projection.
            For example, in EPSG:4326 x is used for latitude, y for longitude and z for height in meters.
            </summary></member>
        <member name="M:Nutiteq.Core.MapPos.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.#ctor">
            <summary>
            Constructs a MapPos object. All coordinates will be 0.
            </summary></member>
        <member name="M:Nutiteq.Core.MapPos.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a MapPos object from 2 coordinates. The z coordinate will be 0.
            </summary>
            <param name="x"> The x coordinate.</param>
            <param name="y"> The y coordinate.</param></member>
        <member name="M:Nutiteq.Core.MapPos.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a MapPos object from 3 coordinates.
            </summary>
            <param name="x"> The x coordinate.</param>
            <param name="y"> The y coordinate.</param>
            <param name="z"> The z coordinate.</param></member>
        <member name="M:Nutiteq.Core.MapPos.add(Nutiteq.Core.MapVec)">
            <summary>
            Creates a new map position by adding a map vector to this map position.
            </summary>
            <param name="v"> The map vector to be added.</param>
            <returns>The new map position.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.subVec(Nutiteq.Core.MapVec)">
            <summary>
            Creates a new map position by subtracting a map vector from this map position.
            </summary>
            <param name="v"> The map vector to be subtracted.</param>
            <returns>The new map position.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.subPos(Nutiteq.Core.MapPos)">
            <summary>
            Creates a new map vector by subtracting a map position from this map position.
            </summary>
            <param name="p"> The map position to be subtracted.</param>
            <returns>The new map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.EqualsInternal(Nutiteq.Core.MapPos)">
            <summary>
            Checks for equality between this and another map position.
            </summary>
            <param name="p"> The other map position.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.DistanceFromPoint(Nutiteq.Core.MapPos)">
            <summary>
            Calculates the distance between this and another map position.
            </summary>
            <param name="p"> The other map position.</param>
            <returns>The distance between the two points.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.DistanceSqrFromPoint(Nutiteq.Core.MapPos)">
            <summary>
            Calculates the square distance between this and another map position.
            </summary>
            <param name="p"> The other map position.</param>
            <returns>The square distance between the two points.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.DistanceFromLine(Nutiteq.Core.MapPos,Nutiteq.Core.MapPos)">
            <summary>
            Calculates the distance between this map position and an infinte line defined by two points.
            </summary>
            <param name="a"> Some point on the infinte line.</param>
            <param name="b"> Another point on the infinite line.</param>
            <returns>The distance between this map position and the infinite line.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.DistanceSqrFromLine(Nutiteq.Core.MapPos,Nutiteq.Core.MapPos)">
            <summary>
            Calculates the square distance between this map position and an infinte line defined by two points.
            </summary>
            <param name="a"> Some point on the infinte line.</param>
            <param name="b"> Another point on the infinite line.</param>
            <returns>The square distance between this map position and the infinite line.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.DistanceFromLineSegment(Nutiteq.Core.MapPos,Nutiteq.Core.MapPos)">
            <summary>
            Calculates the distance between this map position and a line segment.
            </summary>
            <param name="a"> Starting coordinate of the line segment.</param>
            <param name="b"> Ending coordinate of the line segment.</param>
            <returns>The distance between this map position and the line segment.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.DistanceSqrFromLineSegment(Nutiteq.Core.MapPos,Nutiteq.Core.MapPos)">
            <summary>
            Calculates the square distance between this map position and a line segment.
            </summary>
            <param name="a"> Starting coordinate of the line segment.</param>
            <param name="b"> Ending coordinate of the line segment.</param>
            <returns>The square distance between this map position and the line segment.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.NearestPointOnLineSegment(Nutiteq.Core.MapPos,Nutiteq.Core.MapPos)">
            <summary>
            Calculates the nearest point from this map position on a line segment.
            </summary>
            <param name="a"> Starting coordinate of the line segment.</param>
            <param name="b"> Ending coordinate of the line segment.</param>
            <returns>The nearest point from this map position that lies on the line segment.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.GetRotated2D(System.Double,System.Double)">
            <summary>
            Creates a new map position by rotating this map position around the z axis by an angle.
            </summary>
            <param name="sin"> The sine value of the rotation angle.</param>
            <param name="cos"> The cosine value of the rotation angle.</param>
            <returns>The new rotated map position.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapPos.ToString">
            <summary>
            Creates a string representation of this map position, useful for logging.
            </summary>
            <returns>The string representation of this map position.</returns></member>
        <member name="P:Nutiteq.Core.MapPos.Z">
            <summary>
            Returns the z coordinate of this map position.
            </summary></member>
        <member name="P:Nutiteq.Core.MapPos.X">
            <summary>
            Returns the x coordinate of this map position.
            </summary></member>
        <member name="P:Nutiteq.Core.MapPos.Y">
            <summary>
            Returns the y coordinate of this map position.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.MapPosVector.MapPosVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.WrappedCommons.MapPosVectorVector.MapPosVectorVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Core.MapRange">
            <summary>
            A container class that defines a half closed range of values using minimum and maximum values.
            </summary></member>
        <member name="M:Nutiteq.Core.MapRange.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.MapRange.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapRange.#ctor">
            <summary>
            Constructs a MapRange object. The minimum value will be set to positive infinity
            and the maximum value to negative infinity.
            </summary></member>
        <member name="M:Nutiteq.Core.MapRange.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a MapRange object from min and max values.
            If min &gt; max, the values will be swapped internally.
            </summary>
            <param name="min"> The min value.</param>
            <param name="max"> The max value.</param></member>
        <member name="M:Nutiteq.Core.MapRange.EqualsInternal(Nutiteq.Core.MapRange)">
            <summary>
            Checks for equality between this and another map tile.
            </summary>
            <param name="mapRange"> The other map range.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.MapRange.InRange(System.Single)">
            <summary>
            Tests if a value is in this map range. Value is considered in range if min &lt;= val &lt; max.
            </summary>
            <param name="value"> The value to be tested.</param>
            <returns>True if value is in this map range.</returns></member>
        <member name="M:Nutiteq.Core.MapRange.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapRange.ToString">
            <summary>
            Creates a string representation of this map range, useful for logging.
            </summary>
            <returns>The string representation of this map range.</returns></member>
        <member name="P:Nutiteq.Core.MapRange.Max">
            <summary>
            Returns the max value of this map range.
            </summary></member>
        <member name="P:Nutiteq.Core.MapRange.Min">
            <summary>
            Returns the min value of this map range.
            </summary></member>
        <member name="P:Nutiteq.Core.MapRange.Length">
            <summary>
            Calculates the length of this map range. Defined as max - min.
            </summary></member>
        <member name="T:Nutiteq.Ui.MapRenderListener">
            <summary>
            Listener for events like map and vector element clicks etc.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapRenderListener.SwigCreatePolymorphicInstanceMapRenderListener(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Ui.MapRenderListener.OnMapRendered(Nutiteq.Graphics.Bitmap)">
            <summary>
            Listener method that is called when the map has been rendered.
            </summary>
            <param name="mapBitmap"> rendered map as bitmap.</param></member>
        <member name="M:Nutiteq.Ui.MapRenderListener.SwigGetClassNameMapRenderListener">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Ui.MapRenderListener.SwigGetDirectorObjectMapRenderListener">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Core.MapTile">
            <summary>
            An immutable map tile, used by tile layers for representing small pieces of map at different zoom levels and coordinates.
            </summary></member>
        <member name="M:Nutiteq.Core.MapTile.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.MapTile.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapTile.EqualsInternal(Nutiteq.Core.MapTile)">
            <summary>
            Checks for equality between this and another map tile.
            </summary>
            <param name="tile"> The other map tile.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.MapTile.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapTile.ToString">
            <summary>
            Creates a string representation of this map tile, useful for logging.
            </summary>
            <returns>The string representation of this map tile.</returns></member>
        <member name="P:Nutiteq.Core.MapTile.X">
            <summary>
            Returns the x coordinate of this map tile.
            </summary></member>
        <member name="P:Nutiteq.Core.MapTile.Y">
            <summary>
            Returns the y coordinate of this map tile.
            </summary></member>
        <member name="P:Nutiteq.Core.MapTile.Zoom">
            <summary>
            Returns the zoom level of this map tile.
            </summary></member>
        <member name="P:Nutiteq.Core.MapTile.FrameNr">
            <summary>
            Returns the time of this map tile.
            </summary></member>
        <member name="P:Nutiteq.Core.MapTile.TileId">
            <summary>
            Returns the internal tile id of this map tile.
            </summary></member>
        <member name="T:Nutiteq.Core.MapVec">
            <summary>
            A double precision map vector defined by 3 coordinates.
            </summary></member>
        <member name="M:Nutiteq.Core.MapVec.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.#ctor">
            <summary>
            Constructs a MapVec object. All coordinates will be 0.
            </summary></member>
        <member name="M:Nutiteq.Core.MapVec.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a MapVec object from 2 coordinates. The z coordinate will be 0.
            </summary>
            <param name="x"> The x coordinate.</param>
            <param name="y"> The y coordinate.</param></member>
        <member name="M:Nutiteq.Core.MapVec.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a MapVec object from 3 coordinates.
            </summary>
            <param name="x"> The x coordinate.</param>
            <param name="y"> The y coordinate.</param>
            <param name="z"> The z coordinate.</param></member>
        <member name="M:Nutiteq.Core.MapVec.add(Nutiteq.Core.MapVec)">
            <summary>
            Creates a new map vector by adding a map vector to this map vector.
            </summary>
            <param name="v"> The map vector to be added.</param>
            <returns>The new map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.sub(Nutiteq.Core.MapVec)">
            <summary>
            Creates a new map vector by subtracting a map vector from this map vector.
            </summary>
            <param name="v"> The map vector to be subtracted.</param>
            <returns>The new map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.mul(System.Double)">
            <summary>
            Creates a new map vector by multiplying this map vector with a multiplier.
            </summary>
            <param name="multiplier"> The multiplier.</param>
            <returns>The new map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.div(System.Double)">
            <summary>
            Creates a new map vector by dividing this map vector with a divider.
            </summary>
            <param name="divider"> The divider.</param>
            <returns>The new map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.EqualsInternal(Nutiteq.Core.MapVec)">
            <summary>
            Checks for equality between this and another map vector.
            </summary>
            <param name="v"> The other map vector.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.GetRotated2D(System.Double,System.Double)">
            <summary>
            Creates a new map vector by rotating this map vector around it's back end and around z axis.
            </summary>
            <param name="sin"> The sine value of the rotation angle.</param>
            <param name="cos"> The cosine value of the rotation angle.</param>
            <returns>The new rotated map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.CrossProduct2D(Nutiteq.Core.MapVec)">
            <summary>
            Calculates the 2D cross product between this and another map vector. Defined as x1 * y2 - y1 * x2.
            </summary>
            <param name="v"> The other map vector.</param>
            <returns>The 2D cross product between this and another map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.CrossProduct3D(Nutiteq.Core.MapVec)">
            <summary>
            Creates a new map vector that's perpendicular to the plane defined by this and another map vector.
            </summary>
            <param name="v"> The other map vector.</param>
            <returns>The new perpendicular map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.DotProduct(Nutiteq.Core.MapVec)">
            <summary>
            Calculates the dot product between this and another map vector.
            </summary>
            <param name="v"> The other map vector.</param>
            <returns>The dot product between this and another map vector.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.MapVec.ToString">
            <summary>
            Creates a string representation of this map vector, useful for logging.
            </summary>
            <returns>The string representation of this map vector.</returns></member>
        <member name="P:Nutiteq.Core.MapVec.Z">
            <summary>
            Returns the z coordinate of this map vector.
            </summary></member>
        <member name="P:Nutiteq.Core.MapVec.X">
            <summary>
            Returns the x coordinate of this map vector.
            </summary></member>
        <member name="P:Nutiteq.Core.MapVec.Y">
            <summary>
            Returns the y coordinate of this map vector.
            </summary></member>
        <member name="P:Nutiteq.Core.MapVec.Length">
            <summary>
            Calculates the length of this map vector.
            </summary></member>
        <member name="P:Nutiteq.Core.MapVec.Normalized">
            <summary>
            Creates a new map vector by normalizing this map vector.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Marker">
            <summary>
            A billboard element with a static bitmap that can be displayed on the map.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Marker.SwigCreatePolymorphicInstanceMarker(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Marker.#ctor(Nutiteq.VectorElements.Billboard,Nutiteq.Styles.MarkerStyle)">
            <summary>
            Constructs a Marker object with the specified style and attaches it to a billboard element.
            </summary>
            <param name="baseBillboard"> The billboard this billboard will be attached to.</param>
            <param name="style"> The style that defines what this marker looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Marker.#ctor(Nutiteq.Geometry.Geometry,Nutiteq.Styles.MarkerStyle)">
            <summary>
            Constructs a Marker object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this marker.</param>
            <param name="style"> The style that defines what this marker looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Marker.#ctor(Nutiteq.Core.MapPos,Nutiteq.Styles.MarkerStyle)">
            <summary>
            Constructs a Marker object from a map position and a style.
            </summary>
            <param name="pos"> The map position that defines the location of this marker.</param>
            <param name="style"> The style that defines what this marker looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Marker.SwigGetClassNameMarker">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Marker.SwigGetDirectorObjectMarker">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Marker.Style">
            <summary>
            Returns the style of this marker.
            </summary></member>
        <member name="T:Nutiteq.Styles.MarkerStyle">
            <summary>
            A style for markers. Contains attributes for configuring how the marker is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.MarkerStyle.SwigCreatePolymorphicInstanceMarkerStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.MarkerStyle.#ctor(Nutiteq.Graphics.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single,Nutiteq.Graphics.Bitmap,Nutiteq.Styles.BillboardOrientation,Nutiteq.Styles.BillboardScaling,System.Single)">
            <summary>
            Constructs a MarkerStyle object from various parameters. Instantiating the object directly is
            not recommended, MarkerStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the marker.</param>
            <param name="attachAnchorPointX"> The horizontal attaching anchor point for the marker.</param>
            <param name="attachAnchorPointY"> The vertical attaching anchor point for the marker.</param>
            <param name="causesOverlap"> The causes overlap flag for the marker.</param>
            <param name="hideIfOverlapped"> The hide if overlapped flag for the marker.</param>
            <param name="horizontalOffset"> The horizontal offset for the marker.</param>
            <param name="verticalOffset"> The vertical offset for the marker.</param>
            <param name="placementPriority"> The placement priority for the marker.</param>
            <param name="scaleWithDPI"> The scale with DPI flag for the label.</param>
            <param name="anchorPointX"> The horizontal anchor point for the marker.</param>
            <param name="anchorPointY"> The vertical anchor point for the marker.</param>
            <param name="bitmap"> The bitmap for the marker.</param>
            <param name="orientationMode"> The orientation mode for the marker.</param>
            <param name="scalingMode"> The scaling mode for the marker.</param>
            <param name="size"> The size for the marker.</param></member>
        <member name="M:Nutiteq.Styles.MarkerStyle.SwigGetClassNameMarkerStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.MarkerStyle.SwigGetDirectorObjectMarkerStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.MarkerStyle.Size">
            <summary>
            Returns the size of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyle.OrientationMode">
            <summary>
            Returns the orientation mode of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyle.ScalingMode">
            <summary>
            Returns the scaling mode of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyle.AnchorPointX">
            <summary>
            Returns the horizontal anchor point of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyle.AnchorPointY">
            <summary>
            Returns the vertical anchor point of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyle.Bitmap">
            <summary>
            Returns the bitmap of the marker.
            </summary></member>
        <member name="T:Nutiteq.Styles.MarkerStyleBuilder">
            <summary>
            A builder class for MarkerStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.MarkerStyleBuilder.SwigCreatePolymorphicInstanceMarkerStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.MarkerStyleBuilder.#ctor">
            <summary>
            Constructs a MarkerStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.MarkerStyleBuilder.SetAnchorPoint(System.Single,System.Single)">
            <summary>
            Sets the anchor point for the marker. Values will be clamped to [-1, 1] range.
            </summary>
            <param name="anchorPointX"> The new horizontal anchor point for the marker. -1 means the left side,
            0 the center and 1 the right side of the marker. The default is 0.</param>
            <param name="anchorPointY"> The vertical anchor point for the marker. -1 means the bottom,
            0 the center and 1 the top of the marker. The default is -1.</param></member>
        <member name="M:Nutiteq.Styles.MarkerStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the MarkerStyle object using previously set parameters.
            </summary>
            <returns>A new MarkerStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.MarkerStyleBuilder.SwigGetClassNameMarkerStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.MarkerStyleBuilder.SwigGetDirectorObjectMarkerStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.MarkerStyleBuilder.Size">
            <summary>
            Returns the size of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyleBuilder.OrientationMode">
            <summary>
            Returns the orientation mode of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyleBuilder.ScalingMode">
            <summary>
            Returns the scaling mode of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyleBuilder.AnchorPointX">
            <summary>
            Returns the horizontal anchor point of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyleBuilder.AnchorPointY">
            <summary>
            Returns the vertical anchor point of the marker.
            </summary></member>
        <member name="P:Nutiteq.Styles.MarkerStyleBuilder.Bitmap">
            <summary>
            Returns the bitmap of the marker.
            </summary></member>
        <member name="T:Nutiteq.Geometry.MultiGeometry">
            <summary>
            A generic multi geometry container.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiGeometry.SwigCreatePolymorphicInstanceMultiGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiGeometry.#ctor(Nutiteq.WrappedCommons.GeometryVector)">
            <summary>
            Constructs a MultiGeometry from a vector of geometry objects.
            </summary>
            <param name="geometries"> The geometries for multi geometry.</param></member>
        <member name="M:Nutiteq.Geometry.MultiGeometry.GetGeometry(System.Int32)">
            <summary>
            Returns the geometry at the specified index. Index must be between 0 and getGeometryCount (exclusive)
            </summary>
            <returns>The geometry at specified index.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiGeometry.SwigGetClassNameMultiGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiGeometry.SwigGetDirectorObjectMultiGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Geometry.MultiGeometry.GeometryCount">
            <summary>
            Returns the number of geometry objects in this multi geometry container.
            </summary></member>
        <member name="T:Nutiteq.Geometry.MultiLineGeometry">
            <summary>
            A multiline container.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiLineGeometry.SwigCreatePolymorphicInstanceMultiLineGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiLineGeometry.#ctor(Nutiteq.WrappedCommons.LineGeometryVector)">
            <summary>
            Constructs a MultiLineGeometry object from the vector of lines.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiLineGeometry.GetGeometry(System.Int32)">
            <summary>
            Returns the line geometry at the specified index. Index must be between 0 and getGeometryCount (exclusive)
            </summary>
            <returns>The line geometry at specified index.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiLineGeometry.SwigGetClassNameMultiLineGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiLineGeometry.SwigGetDirectorObjectMultiLineGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Geometry.MultiPointGeometry">
            <summary>
            A multipoint container.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiPointGeometry.SwigCreatePolymorphicInstanceMultiPointGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiPointGeometry.#ctor(Nutiteq.WrappedCommons.PointGeometryVector)">
            <summary>
            Constructs a MultiPointGeometry from the vector of points.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiPointGeometry.GetGeometry(System.Int32)">
            <summary>
            Returns the point geometry at the specified index. Index must be between 0 and getGeometryCount (exclusive)
            </summary>
            <returns>The point geometry at specified index.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiPointGeometry.SwigGetClassNameMultiPointGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiPointGeometry.SwigGetDirectorObjectMultiPointGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Geometry.MultiPolygonGeometry">
            <summary>
            A multipolygon container.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiPolygonGeometry.SwigCreatePolymorphicInstanceMultiPolygonGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiPolygonGeometry.#ctor(Nutiteq.WrappedCommons.PolygonGeometryVector)">
            <summary>
            Constructs a MultiPolygonGeometry from the vector of polygons.
            </summary></member>
        <member name="M:Nutiteq.Geometry.MultiPolygonGeometry.GetGeometry(System.Int32)">
            <summary>
            Returns the polygon geometry at the specified index. Index must be between 0 and getGeometryCount (exclusive)
            </summary>
            <returns>The polygon geometry at specified index.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiPolygonGeometry.SwigGetClassNameMultiPolygonGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.MultiPolygonGeometry.SwigGetDirectorObjectMultiPolygonGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.VectorElements.NMLModel">
            <summary>
            A 3D model that can be displayed on the map.
            </summary>
            <summary>
            NML models can be created from Collada files directly and placed anywhere on the map or converted from KMZ files.
            NML models are optimized for fast loading and rendering.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.SwigCreatePolymorphicInstanceNMLModel(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.#ctor(Nutiteq.Geometry.Geometry,Nutiteq.WrappedCommons.UnsignedCharVector)">
            <summary>
            Constructs a NMLModel object from a geometry object and serialized model data.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this model.</param>
            <param name="sourceModelData"> Serialized data for 3D model.</param></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.#ctor(Nutiteq.Core.MapPos,Nutiteq.WrappedCommons.UnsignedCharVector)">
            <summary>
            Constructs a NMLModel object from a map position and serialized model data.
            </summary>
            <param name="pos"> The map position that defines the location of this model.</param>
            <param name="sourceModelData"> Serialized data for 3D model.</param></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.SetGeometry(Nutiteq.Geometry.Geometry)">
            <summary>
            Sets the location for this model.
            </summary>
            <param name="geometry"> The new geometry object that defines the location of this model.</param></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.SetPos(Nutiteq.Core.MapPos)">
            <summary>
            Sets the location for this model.
            </summary>
            <param name="pos"> The new map position that defines the location of this model.</param></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.SetRotation(Nutiteq.Core.MapVec,System.Single)">
            <summary>
            Sets the rotation of this model using an axis and an angle.
            </summary>
            <param name="axis"> The axis of rotation.</param>
            <param name="angle"> The rotation angle in degrees.</param></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.SwigGetClassNameNMLModel">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.NMLModel.SwigGetDirectorObjectNMLModel">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.NMLModel.RotationAngle">
            <summary>
            Returns the rotation angle of this model.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.NMLModel.Scale">
            <summary>
            Returns the scale of this model.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.NMLModel.RotationAxis">
            <summary>
            Returns the rotation axis of this model. If rotation angle is 0, then the axis is irrelevant.
            </summary></member>
        <member name="T:Nutiteq.DataSources.NMLModelLODTreeDataSource">
            <summary>
            An abstract base class for NML model LOD tree data sources. NML model LOD tree data sources are tile based data sources
            that provide access to different entities: map tiles, LOD tree metadata, model meshes and textures.
            </summary></member>
        <member name="M:Nutiteq.DataSources.NMLModelLODTreeDataSource.SwigCreatePolymorphicInstanceNMLModelLODTreeDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.DataSources.NMLModelLODTreeDataSource.Projection">
            <summary>
            The Projection property.
            </summary></member>
        <member name="M:Nutiteq.DataSources.NMLModelLODTreeDataSource.getProjectionInternal">
            <summary>
            Returns the projection used by this data source.
            </summary>
            <returns>The projection used by this data source.</returns></member>
        <member name="M:Nutiteq.DataSources.NMLModelLODTreeDataSource.SwigGetClassNameNMLModelLODTreeDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.NMLModelLODTreeDataSource.SwigGetDirectorObjectNMLModelLODTreeDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Layers.NMLModelLODTreeLayer">
            <summary>
            An advanced layer for 3D models that supports automatic Level of Detail (LOD) calculation based on view.
            Should be used together with corresponding data source.
            </summary></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.SwigCreatePolymorphicInstanceNMLModelLODTreeLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.#ctor(Nutiteq.DataSources.NMLModelLODTreeDataSource)">
            <summary>
            Constructs a NMLModelLODTreeLayer object from a data source.
            </summary>
            <param name="dataSource"> The data source from which this layer loads data.</param></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.GetDataSource">
            <summary>
            Returns the data source of this layer.
            </summary>
            <returns>The data source that was bound to this vector layer on construction.</returns></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.SetMaxMemorySize(System.UInt32)">
            <summary>
            Set memory usage constraints for the layer. The specified limit is not exact,
            but should be relatively close to the actual memory usage of the layer.
            If specific view requires more data than specified limit, then lower LOD levels
            of the models are used. The default is 40MB.
            </summary>
            <param name="size"> The memory limit in bytes.</param></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.SetLODResolutionFactor(System.Single)">
            <summary>
            Set relative model LOD resolution. Higher values than 1 result in higher details
            (but slower performance and higher memory usage), while lower values give better
            performance but lower quality. The default is 1.
            </summary>
            <param name="factor"> The relative LOD resolution factor.</param></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.SwigGetClassNameNMLModelLODTreeLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.NMLModelLODTreeLayer.SwigGetDirectorObjectNMLModelLODTreeLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.VectorElements.NMLModelLODTreeProxy">
            <summary>
            A proxy class representing a small part (f.e a single building) of the NMLModelLODTree.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.NMLModelLODTreeProxy.SwigCreatePolymorphicInstanceNMLModelLODTreeProxy(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.NMLModelLODTreeProxy.Geometry">
            <summary>
            The PointGeometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.NMLModelLODTreeProxy.#ctor(Nutiteq.Core.MapPos)">
            <summary>
            Constructs a NMLModelLODTreeProxy object from a map position.
            </summary>
            <param name="pos"> The map position that defines the location of this proxy.</param></member>
        <member name="M:Nutiteq.VectorElements.NMLModelLODTreeProxy.SwigGetClassNameNMLModelLODTreeProxy">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.NMLModelLODTreeProxy.SwigGetDirectorObjectNMLModelLODTreeProxy">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.DataSources.NutiteqOnlineTileDataSource">
            <summary>
            An online tile data source that connects to Nutiteq tile server.
            Tile server is currently used to
            </summary></member>
        <member name="M:Nutiteq.DataSources.NutiteqOnlineTileDataSource.SwigCreatePolymorphicInstanceNutiteqOnlineTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.NutiteqOnlineTileDataSource.#ctor(System.String)">
            <summary>
            Constructs a NutiteqTileDataSource object.
            </summary>
            <param name="source"> Tile source id. Default: "nutiteq.osm".</param></member>
        <member name="M:Nutiteq.DataSources.NutiteqOnlineTileDataSource.SwigGetClassNameNutiteqOnlineTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.NutiteqOnlineTileDataSource.SwigGetDirectorObjectNutiteqOnlineTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Layers.NutiteqOnlineVectorTileLayer">
            <summary>
            Specialized online vector tile layer that connects to Nutiteq online tile server.
            This layer is intended as a 'shortcut' to make using Nutiteq online service and
            vector tiles as simple as possible.
            </summary></member>
        <member name="M:Nutiteq.Layers.NutiteqOnlineVectorTileLayer.SwigCreatePolymorphicInstanceNutiteqOnlineVectorTileLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Layers.NutiteqOnlineVectorTileLayer.#ctor(System.String)">
            <summary>
            Constructs a NutiteqOnlineVectorTileLayer object from a style asset name.
            Uses "nutiteq.osm" as a source.
            Style asset must be included in the project, style asset defines visual style of the map.
            </summary>
            <param name="styleAssetName"> The name of the style asset that defines visual style of the map.</param></member>
        <member name="M:Nutiteq.Layers.NutiteqOnlineVectorTileLayer.#ctor(System.String,System.String)">
            <summary>
            Constructs a NutiteqOnlineVectorTileLayer object from a source name and style asset name.
            Style asset must be included in the project, style asset defines visual style of the map.
            </summary>
            <param name="source"> The tile source name. Main and default source is currently "nutiteq.osm".</param>
            <param name="styleAssetName"> The name of the style asset that defines visual style of the map.</param></member>
        <member name="M:Nutiteq.Layers.NutiteqOnlineVectorTileLayer.SwigGetClassNameNutiteqOnlineVectorTileLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.NutiteqOnlineVectorTileLayer.SwigGetDirectorObjectNutiteqOnlineVectorTileLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.PackageManager.NutiteqPackageManager">
            <summary>
            Offline map package manager that uses Nutiteq online service for map package downloads.
            After packages are downloaded, they can be used offline without any connection to the server.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.NutiteqPackageManager.#ctor(System.String,System.String)">
            <summary>
            Constructs a NutiteqPackageManager object, given application context and data folder.
            The data folder must exist before creating a new package manager and it is assumed to be persistent.
            Note: the package manager must be explicitly started using start() method!
            </summary>
            <param name="source"> Name of the package source. Default: "nutiteq.osm"</param>
            <param name="dataFolder"> The folder where downloaded packages are kept. It must exist and must be writable.</param></member>
        <member name="T:Nutiteq.DataSources.OnlineNMLModelLODTreeDataSource">
            <summary>
            Online NML LOD Tree data source. This data source needs special
            online service and uses custom protocol.
            </summary></member>
        <member name="M:Nutiteq.DataSources.OnlineNMLModelLODTreeDataSource.SwigCreatePolymorphicInstanceOnlineNMLModelLODTreeDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.OnlineNMLModelLODTreeDataSource.#ctor(Nutiteq.Projections.Projection,System.String)">
            <summary>
            Constructs an OnlineNMLModelLODTreeDataSource object.
            </summary>
            <param name="projection"> The projection for the database. Currently only EPSG3857 is supported.</param>
            <param name="serviceUrl"> The service connection point.</param></member>
        <member name="M:Nutiteq.DataSources.OnlineNMLModelLODTreeDataSource.SwigGetClassNameOnlineNMLModelLODTreeDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.OnlineNMLModelLODTreeDataSource.SwigGetDirectorObjectOnlineNMLModelLODTreeDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Components.Options">
            <summary>
            A class containing various options for rendering and map manipulation.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.BaseProjection">
            <summary>
            The Projection property.
            </summary></member>
        <member name="M:Nutiteq.Components.Options.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Components.Options.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Components.Options.SetAmbientLight(Nutiteq.Graphics.Color)">
            <summary>
            Sets the parameters for the ambient light. Ambient light affects all lighting enabled models
            in the scene equally, it has no direction or location.
            </summary>
            <param name="color"> The new color for the ambient light.</param></member>
        <member name="M:Nutiteq.Components.Options.SetMainLight(Nutiteq.Graphics.Color,Nutiteq.Core.MapVec)">
            <summary>
            Sets the parameters for the main light. The main light affects all lighting enabled models
            in the scene equally from a certain direction. This light can be used to simulate sun or moon light.
            </summary>
            <param name="color"> The new color for the main light.</param>
            <param name="direction"> The new direction vector for the main light. (0,0,-1) means straight down, (-0.707,0,-0.707) means
            from east with a 45 degree angle. The direction vector will be normalized.</param></member>
        <member name="M:Nutiteq.Components.Options.SetClickTypeDetecton(System.Boolean)">
            <summary>
            Sets the state of the click type detection flag. If set to true clicks are categorized as normal clicks, double clicks,
            long clicks and dual clicks. The click type resolving take about 400ms, so for applications that do not
            require this functionality, it can be turned off. The default is true.
            </summary>
            <param name="enabled"> The new state of the click type detection flag.</param></member>
        <member name="M:Nutiteq.Components.Options.SetWatermarkAlignment(System.Single,System.Single)">
            <summary>
            Sets the position of the watermark relative to the screen. Values will be clamped to [-1, 1] range.
            </summary>
            <param name="alignmentX"> The new horizontal alignment for the watermark. -1 means the left side,
            0 the center and 1 the right side. The default is 1.</param>
            <param name="alignmentY"> The new vertical alignment for the watermark. -1 means the bottom,
            0 the center and 1 the top. The default is -1.</param></member>
        <member name="M:Nutiteq.Components.Options.SetWatermarkPadding(System.Single,System.Single)">
            <summary>
            Sets the padding between the watermark and the edge of the screen.
            </summary>
            <param name="paddingX"> The new horizontal padding for the watermark in dp. The default is 4.</param>
            <param name="paddingY"> The new vertical padding for the watermark in dp. The default is 4.</param></member>
        <member name="M:Nutiteq.Components.Options.getBaseProjectionInternal">
            <summary>
            Returns the base projection.
            </summary>
            <returns>The base projection.</returns></member>
        <member name="M:Nutiteq.Components.Options.setBaseProjectionInternal(Nutiteq.Projections.Projection)">
            <summary>
            Sets the base projection. All MapView, MapEventListener and Options methods use the coordinate system of this projection.
            For example, if base projection is set to EPSG3857 then MapView::getFocusPos returns the coordinates in the EPSG3857 coordinate system,
            The same applies to setter methods like MapView::setFocusPos which expect the input coordinates to be in the base projection's coordinate system.
            The default is EPSG3857.
            </summary>
            <param name="baseProjection"> The new base projection.</param></member>
        <member name="P:Nutiteq.Components.Options.FieldOfViewY">
            <summary>
            Returns the vertial field of view angle.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.KineticZoom">
            <summary>
            Returns the state of kinetic zoom flag.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.Rotatable">
            <summary>
            Returns the state of the map rotatability flag.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.UserInput">
            <summary>
            Returns the state of the user input flag.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.ClickTypeDetection">
            <summary>
            Returns the click type detection state.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.KineticPan">
            <summary>
            Returns the state of the kinetic panning flag.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.KineticRotation">
            <summary>
            Returns the state of the kinetic rotation flag.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.SeamlessPanning">
            <summary>
            Returns the state of seamless horizontal panning flag.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.ZoomRange">
            <summary>
            Returns the zoom range constraint.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.TiltRange">
            <summary>
            Returns the tilt range constraint.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.PanBounds">
            <summary>
            Returns the map panning bounds constraints. Map bounds minimum and maximum points are in the base
            projection's coordinate system.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.FocusPointOffset">
            <summary>
            Returns the focus point offset (from screen center) in pixels.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.MainLightDirection">
            <summary>
            Returns the direction of the main light.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.MainLightColor">
            <summary>
            Returns the color of the main light.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.AmbientLightColor">
            <summary>
            Returns the color of the ambient light.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.ProjectionMode">
            <summary>
            Returns the projection mode.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.PanningMode">
            <summary>
            Returns the panning mode.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.PivotMode">
            <summary>
            Returns the pivot mode.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.BackgroundBitmap">
            <summary>
            Returns the background bitmap. May be null.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.SkyBitmap">
            <summary>
            Returns the sky bitmap. May be null.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.EnvelopeThreadPoolSize">
            <summary>
            Returns the number of threads used by the envelope task pool.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.TileThreadPoolSize">
            <summary>
            Returns the number of threads used by the tile task pool.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.TileDrawSize">
            <summary>
            Returns the tile size used for drawing map tiles.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.DPI">
            <summary>
            Returns the dots per inch value.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.DrawDistance">
            <summary>
            Returns the draw distance value.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.WatermarkBitmap">
            <summary>
            Returns the watermark bitmap. May be null.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.WatermarkAlignmentX">
            <summary>
            Returns the horizontal alignment of the watermark.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.WatermarkAlignmentY">
            <summary>
            Returns the vertical alignment of the watermark.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.WatermarkScale">
            <summary>
            Returns the watermark relative scale.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.WatermarkPaddingX">
            <summary>
            Returns the horizontal padding of the watermark.
            </summary></member>
        <member name="P:Nutiteq.Components.Options.WatermarkPaddingY">
            <summary>
            Returns the vertical padding of the watermark.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageAction">
            <summary>
            The current action that describes the operation being performed with the package.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageAction.PackageActionReady">
            <summary>
            Package is ready.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageAction.PackageActionWaiting">
            <summary>
            Package is waiting in the task queue.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageAction.PackageActionDownloading">
            <summary>
            Package is being downloaded.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageAction.PackageActionCopying">
            <summary>
            Package data is being copied.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageAction.PackageActionRemoving">
            <summary>
            Package is being removed.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageErrorType">
            <summary>
            Possible error types for failed package downloads.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageErrorType.PackageErrorTypeSystem">
            <summary>
            Internal or system error.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageErrorType.PackageErrorTypeConnection">
            <summary>
            Connection or network error.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageErrorType.PackageErrorTypeDownloadLimitExceeded">
            <summary>
            The number of downloaded packages exceeded subscription limit.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageErrorType.PackageErrorTypePackageTooBig">
            <summary>
            The bounding box of the package contains too many tiles.
            This error is only returned for custom bounding box packages.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageErrorType.PackageErrorTypeNoOfflinePlan">
            <summary>
            The license does not allow downloading offline packages.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageInfo">
            <summary>
            Information about map package. This includes id, version, name, description and size.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageInfo.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageInfo.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageInfo.#ctor(System.String,System.Int32,System.UInt64,System.String,Nutiteq.PackageManager.PackageTileMask,Nutiteq.PackageManager.PackageMetaInfo)">
            <summary>
            Constructs a new package info instance.
            </summary>
            <param name="packageId"> The unique id of the package</param>
            <param name="version"> The increasing version number of the package</param>
            <param name="size"> Size of the package in bytes</param>
            <param name="serverUrl"> Location of the package</param>
            <param name="tileMask"> The tile mask of the package</param>
            <param name="metaInfo"> Package meta info</param></member>
        <member name="M:Nutiteq.PackageManager.PackageInfo.GetNames(System.String)">
            <summary>
            Returns the names (short description) of the package. This can be displayed to the user. Each package may have multiple names, if the package has multiple classifications.
            Note: this information is dervied from package meta info, "name_XXX" fields.
            </summary>
            <param name="lang"> The language for the name</param>
            <returns>The list of names for the package in the specified language (if not available, generic/English names are returned)</returns></member>
        <member name="P:Nutiteq.PackageManager.PackageInfo.PackageId">
            <summary>
            Returns the internal package id. This should not be displayed to the user.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageInfo.Name">
            <summary>
            Returns the default name (short description) of the package. It is better to use getNames method instead, as each package may contain multiple names.
            The name returned is generic name or if that is not available, then English name.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageInfo.Version">
            <summary>
            Returns the package version. This should not be displayed to the user.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageInfo.Size">
            <summary>
            Returns the size of the package in bytes. This can be displayed to the user.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageInfo.MetaInfo">
            <summary>
            Returns package meta info. If package contains no meta info, null is returned.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageInfo.TileMask">
            <summary>
            Returns the encoded tile mask of the package. This should not be displayed to the user.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.PackageInfoVector.PackageInfoVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.PackageManager.PackageManager">
            <summary>
            Base class for offline map package manager. Package manager supports downloading/removing packages.
            It can be queried about available packages and status of the packages. It works asynchronously in
            the background and can inform app when packages have been updated.
            It works persistently. If a package download is started and app is closed, the download will resume
            when the package manager is started next time.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageManager.PackageManagerListener">
            <summary>
            The PackageManagerListener property.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a new package manager, given URL for package list and data folder.
            The data folder must exist before creating a new package manager and it is assumed to be persistent.
            Note: the package manager must be explicitly started using start() method!
            </summary>
            <param name="packageListUrl"> The URL that defines all packages.</param>
            <param name="dataFolder"> The folder where downloaded packages are kept. It must exist and must be writable.</param>
            <param name="serverEncKey"> Encryption key for server packages</param>
            <param name="localEncKey"> Encryption key for local packages</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.getPackageManagerListenerInternal">
            <summary>
            Returns the current listener for package manager events.
            </summary>
            <returns>The current listener or null if none is set.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.setPackageManagerListenerInternal(Nutiteq.PackageManager.PackageManagerListener)">
            <summary>
            Sets the package manager listener.
            </summary>
            <param name="listener"> The new package manager listener to use.</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.Start">
            <summary>
            Starts the package manager. All previous tasks will be resumed after this.
            </summary>
            <returns>True if package manager was successfully started. False otherwise (can not create/access database).</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.Stop(System.Boolean)">
            <summary>
            Stops the package manager. The stopping can be asynchronous or synchronous.
            </summary>
            <param name="wait"> If set to true, then synchronous stopping is performed and the operation may take a while.</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.GetServerPackage(System.String)">
            <summary>
            Returns the specified server package.
            Note that the list must be retrieved from the server first, using startPackageListDownload.
            </summary>
            <returns>The specified server package or null if it is not in the server package list.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.GetLocalPackage(System.String)">
            <summary>
            Returns the specified local package.
            </summary>
            <returns>The specified local package or null if it can not be found in the package list.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.GetLocalPackageStatus(System.String,System.Int32)">
            <summary>
            Returns the status of the specified package.
            </summary>
            <param name="packageId"> The id of the package.</param>
            <param name="version"> The version of the package. Use -1 for the latest version.</param>
            <returns>The status of the package or null if it is not yet downloaded or downloading.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.StartPackageListDownload">
            <summary>
            Starts downloading package list asynchronously. When this task finishes, listener is called and server package list is updated.
            </summary>
            <returns>True if the package list will be downloaded and listener will be notified (if set). False if it can not be downloaded.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.StartPackageImport(System.String,System.Int32,System.String)">
            <summary>
            Starts importing the specified package asynchronously. When this task finishes, listener is called and local package list is updated.
            Note 1: In general, package manager may need temporary storage equal to the size of the package during import. It is the responsibility of the app to perform such checks.
            Note 2: the package may not be deleted after this call, as the import is asynchronous operation. It is safe to delete the original file once import is complete (this is notified via manager listener).
            </summary>
            <param name="packageId"> The id of the package to download.</param>
            <param name="version"> The version of the package.</param>
            <param name="packageFileName"> The fully qualified path of the package.</param>
            <returns>True is the package will be imported.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.StartPackageDownload(System.String)">
            <summary>
            Starts downloading specified package asynchronously. When this task finishes, listener is called and local package list is updated.
            Note: In general, package manager may need temporary storage equal to the size of the package during download. It is the responsibility of the app to perform such checks.
            </summary>
            <param name="packageId"> The id of the package to download.</param>
            <returns>True is the package is available and will be downloaded. False if the package was not found.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.StartPackageRemove(System.String)">
            <summary>
            Starts the removal of specified package asynchronously. When this task finishes, listener is called and local package list is updated.
            </summary>
            <param name="packageId"> The id of the package to remove.</param>
            <returns>True is the package was found and will be removed. False if the package was not found.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.CancelPackageTasks(System.String)">
            <summary>
            Cancels the current/pending tasks involving of the specified package.
            </summary>
            <param name="packageId"> The id of the package to cancel</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManager.SetPackagePriority(System.String,System.Int32)">
            <summary>
            Sets the priority of the specific package.
            If the given priority is higher than priority of any other package, other operations will be paused and this package is processed immediately.
            If the given priority is set to negative value, package download will be paused until priority is reset to non-negative value.
            </summary>
            <param name="packageId"> The id of the download package.</param>
            <param name="priority"> The priority of the download package. If it is less than zero, package download is paused.</param></member>
        <member name="P:Nutiteq.PackageManager.PackageManager.ServerPackages">
            <summary>
            Returns the list of available server packages.
            Note that the list must be retrieved from the server first, using startPackageListDownload.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageManager.LocalPackages">
            <summary>
            Returns the list of available local downloaded packages.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageManager.ServerPackageListAge">
            <summary>
            Returns the age of server package list. This method can be used to measure the time of the download and check whether the list should be updated.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageManager.ServerPackageListMetaInfo">
            <summary>
            Returns the metainfo of server packages.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageManagerListener">
            <summary>
            Base class for map package manager event listeners.
            Includes callbacks for package list events and individual package events.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.SwigCreatePolymorphicInstancePackageManagerListener(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.OnPackageListUpdated">
            <summary>
            Listener method that is called when server package list has been successfully updated.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.OnPackageListFailed">
            <summary>
            Listener method that is called when server package could not be downloaded or updated.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.OnPackageStatusChanged(System.String,System.Int32,Nutiteq.PackageManager.PackageStatus)">
            <summary>
            Listener method that is called when a package status has changed.
            Information about the status of the package (current action, progress, etc) is explictly given with this event.
            </summary>
            <param name="id"> The id of the package whose status has changed</param>
            <param name="version"> The version of the package whose status has changed</param>
            <param name="status"> The current status of the package</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.OnPackageCancelled(System.String,System.Int32)">
            <summary>
            Listener method that is called when a package download has been cancelled.
            </summary>
            <param name="id"> The id of the package that has been cancelled</param>
            <param name="version"> The version of the package that has been cancelled</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.OnPackageUpdated(System.String,System.Int32)">
            <summary>
            Listener method that is called when a package is successfully updated (downloaded or removed).
            </summary>
            <param name="id"> The id of the package that has been updated</param>
            <param name="version"> The version of the package that has been updated</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.OnPackageFailed(System.String,System.Int32,Nutiteq.PackageManager.PackageErrorType)">
            <summary>
            Listener method that is called when updating a package failed (network error, etc).
            </summary>
            <param name="id"> The id of the package that failed</param>
            <param name="version"> The version of the package that failed</param>
            <param name="errorType"> Reason or type of the failure</param></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.SwigGetClassNamePackageManagerListener">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageManagerListener.SwigGetDirectorObjectPackageManagerListener">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.DataSources.PackageManagerTileDataSource">
            <summary>
            A tile data source that loads tiles from package manager.
            </summary></member>
        <member name="M:Nutiteq.DataSources.PackageManagerTileDataSource.SwigCreatePolymorphicInstancePackageManagerTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.PackageManagerTileDataSource.#ctor(Nutiteq.PackageManager.PackageManager)">
            <summary>
            Constructs a PackageManagerTileDataSource object.
            </summary>
            <param name="packageManager"> The package manager that is used to retrieve requested tiles.</param></member>
        <member name="M:Nutiteq.DataSources.PackageManagerTileDataSource.SwigGetClassNamePackageManagerTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.PackageManagerTileDataSource.SwigGetDirectorObjectPackageManagerTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.PackageManager.PackageMetaInfo">
            <summary>
            Package meta info element. Can contain JSON-style structured data, including objects and arrays.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageMetaInfo.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageMetaInfo.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageMetaInfo.GetJsonValue">
            <summary>
            Returns the underlying JSON value.
            </summary>
            <returns>The value of the element.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageMetaInfo.GetArrayElement(System.Int32)">
            <summary>
            Returns the element of array at specified position.
            </summary>
            <param name="idx"> The index of the array element to return (starting from 0).</param>
            <returns>The array element at specified position or null if the element does not exist.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageMetaInfo.GetMapElement(System.String)">
            <summary>
            Returns the element of map with the specified key.
            </summary>
            <param name="key"> The key of the map element to return.</param>
            <returns>The map element with the specified key or null if the element does not exist.</returns></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.Type">
            <summary>
            Returns the type of this meta info element.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.Bool">
            <summary>
            Returns the boolean value of this element.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.Long">
            <summary>
            Returns the integer value of this element.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.Double">
            <summary>
            Returns the floating point value of this element.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.String">
            <summary>
            Returns the string value of this element.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.ArraySize">
            <summary>
            Returns the number of elements in the array.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageMetaInfo.MapKeys">
            <summary>
            Returns all the keys in the map.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageMetaInfoType">
            <summary>
            Meta info type.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeNull">
            <summary>
            Null element.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeString">
            <summary>
            String element.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeBool">
            <summary>
            Boolean element.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeInteger">
            <summary>
            Integer element.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeDouble">
            <summary>
            Double-precision floating point element.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeArray">
            <summary>
            Array element.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageMetaInfoType.PackageMetaInfoTypeMap">
            <summary>
            Map (dictionary) element.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageStatus">
            <summary>
            The status of the map package. This includes information whether the package is ready, queued for processing, downloading, etc.
            Also it contains information if the package processing is paused and about the progress.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageStatus.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageStatus.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageStatus.#ctor(Nutiteq.PackageManager.PackageAction,System.Boolean,System.Single)">
            <summary>
            Constructs a new status.
            </summary>
            <param name="currentAction"> The current action being performed with the package.</param>
            <param name="paused"> True if the action is paused.</param>
            <param name="progress"> The progress of the operation (in the range 0..100)</param></member>
        <member name="P:Nutiteq.PackageManager.PackageStatus.Paused">
            <summary>
            Returns the paused state of the action.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageStatus.CurrentAction">
            <summary>
            Returns the current action being performed.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageStatus.Progress">
            <summary>
            Returns the progress of the action.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageTileMask">
            <summary>
            Tile mask contains map package spatial coverage information and
            can be used for very fast 'tile in package' tests.
            </summary></member>
        <member name="M:Nutiteq.PackageManager.PackageTileMask.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageTileMask.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.PackageManager.PackageTileMask.GetTileStatus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the status of the specified tile. This method can be used for fast testing whether a tile is part of the package.
            </summary>
            <param name="zoom"> The zoom level of the tile.</param>
            <param name="x"> The x coordinate of the tile.</param>
            <param name="y"> The y coordinate of the tile.</param>
            <returns>The status of the specified tile.</returns></member>
        <member name="P:Nutiteq.PackageManager.PackageTileMask.StringValue">
            <summary>
            Returns the encoded tile mask value. This should not be displayed to the user.
            </summary></member>
        <member name="P:Nutiteq.PackageManager.PackageTileMask.MaxZoomLevel">
            <summary>
            Returns maximum zoom level encoded in this tilemask.
            </summary></member>
        <member name="T:Nutiteq.PackageManager.PackageTileStatus">
            <summary>
            Tile status.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageTileStatus.PackageTileStatusMissing">
            <summary>
            Tile is not part of the package.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageTileStatus.PackageTileStatusPartial">
            <summary>
            Tile is part of the package, but package does not fully cover it.
            </summary></member>
        <member name="F:Nutiteq.PackageManager.PackageTileStatus.PackageTileStatusFull">
            <summary>
            Tile if part of the package and package fully covers it.
            </summary></member>
        <member name="T:Nutiteq.Components.PanningMode">
            <summary>
            Possible panning modes for dual touch user input.
            </summary></member>
        <member name="F:Nutiteq.Components.PanningMode.PanningModeFree">
            <summary>
            Free panning means that the map panning is unrestricted, user is able to zoom, rotate and
            pan the map at the same time without any artificial limits.
            </summary></member>
        <member name="F:Nutiteq.Components.PanningMode.PanningModeSticky">
            <summary>
            Sticky panning means that the map panning is restricted, user is able to freely pan the map,
            but zooming and rotating gestures can't be performed at the same time. User is still able to
            switch between zooming and rotating the map but it takes a bit more effort compared to FREE panning.
            gesture is performed and
            </summary></member>
        <member name="F:Nutiteq.Components.PanningMode.PanningModeStickyFinal">
            <summary>
            Final sticky panning means that the map panning is restricted, user is able to freely pan the map,
            but zooming and rotating gestures can't be performed at the same time. Once the gesture type is
            determined the user is stuck with either zooming or rotating. To switch the gesture the user has to lift
            at least one the two fingers off the screen.
            </summary></member>
        <member name="T:Nutiteq.DataSources.PersistentCacheTileDataSource">
            <summary>
            A tile data source that loads tiles from another tile data source
            and caches them in an offline sqlite database. Tiles will remain in the database
            even after the application is closed.
            The database contains table "persistent_cache" with the following fields:
            "tileId" (tile id), "compressed" (compressed tile image),
            "time" (the time the tile was cached in milliseconds from epoch).
            Default cache capacity is 50MB.
            </summary></member>
        <member name="M:Nutiteq.DataSources.PersistentCacheTileDataSource.SwigCreatePolymorphicInstancePersistentCacheTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.PersistentCacheTileDataSource.#ctor(Nutiteq.DataSources.TileDataSource,System.String)">
            <summary>
            Constructs a PersistentCacheTileDataSource object from tile data source
            and a sqlite database. The sqlite database must be writable, if it doesn't exist, an empty one
            will be created instead.
            </summary>
            <param name="dataSource"> The datasource to be cached.</param>
            <param name="databasePath"> The path to the sqlite database, where the tiles will be cached.</param></member>
        <member name="M:Nutiteq.DataSources.PersistentCacheTileDataSource.Close">
            <summary>
            Close the cache database. The datasource will still work afterwards,
            but all requests will be directed to the original datasource.
            </summary></member>
        <member name="M:Nutiteq.DataSources.PersistentCacheTileDataSource.SwigGetClassNamePersistentCacheTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.PersistentCacheTileDataSource.SwigGetDirectorObjectPersistentCacheTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.PersistentCacheTileDataSource.CacheOnlyMode">
            <summary>
            Returns the state of cache only mode.
            </summary></member>
        <member name="T:Nutiteq.Components.PivotMode">
            <summary>
            Possible pivot modes.
            </summary></member>
        <member name="F:Nutiteq.Components.PivotMode.PivotModeTouchpoint">
            <summary>
            The touch point (or middle point between 2 finger touches) is used as the pivot point.
            </summary></member>
        <member name="F:Nutiteq.Components.PivotMode.PivotModeCenterpoint">
            <summary>
            Screen center is always used for pivot point.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Point">
            <summary>
            A geometric point that can be displayed on the map.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Point.SwigCreatePolymorphicInstancePoint(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Point.Geometry">
            <summary>
            The PointGeometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Point.#ctor(Nutiteq.Geometry.PointGeometry,Nutiteq.Styles.PointStyle)">
            <summary>
            Constructs a Point object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this point.</param>
            <param name="style"> The style that defines what this point looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Point.#ctor(Nutiteq.Core.MapPos,Nutiteq.Styles.PointStyle)">
            <summary>
            Constructs a Point object from a map position and a style.
            </summary>
            <param name="pos"> The map position that defines the location of this point.</param>
            <param name="style"> The style that defines what this point looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Point.setGeometryInternal(Nutiteq.Geometry.PointGeometry)">
            <summary>
            Sets the location for this point.
            </summary>
            <param name="geometry"> The new geometry object that defines the location of this point.</param></member>
        <member name="M:Nutiteq.VectorElements.Point.GetPos">
            <summary>
            Returns the location of this point.
            </summary>
            <returns>The map position that defines the location of this point.</returns></member>
        <member name="M:Nutiteq.VectorElements.Point.SetPos(Nutiteq.Core.MapPos)">
            <summary>
            Sets the location of this point.
            </summary>
            <param name="pos"> The new map position that defines the location of this point.</param></member>
        <member name="M:Nutiteq.VectorElements.Point.SwigGetClassNamePoint">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Point.SwigGetDirectorObjectPoint">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Point.Style">
            <summary>
            Returns the style of this point.
            </summary></member>
        <member name="T:Nutiteq.Geometry.PointGeometry">
            <summary>
            Point geometry. Geometry is defined by a single map position.
            </summary></member>
        <member name="M:Nutiteq.Geometry.PointGeometry.SwigCreatePolymorphicInstancePointGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.PointGeometry.#ctor(Nutiteq.Core.MapPos)">
            <summary>
            Constructs a PointGeometry object from a given map position.
            </summary>
            <param name="pos"> The map position.</param></member>
        <member name="M:Nutiteq.Geometry.PointGeometry.SwigGetClassNamePointGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.PointGeometry.SwigGetDirectorObjectPointGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Geometry.PointGeometry.Pos">
            <summary>
            Returns the position of the point.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.PointGeometryVector.PointGeometryVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Styles.PointStyle">
            <summary>
            A style for points. Contains attributes for configuring how the point is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.PointStyle.SwigCreatePolymorphicInstancePointStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.PointStyle.#ctor(Nutiteq.Graphics.Color,Nutiteq.Graphics.Bitmap,System.Single,System.Single)">
            <summary>
            Constructs a PointStyle object from various parameters. Instantiating the object directly is
            not recommended, PointStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the point.</param>
            <param name="bitmap"> The bitmap for the point.</param>
            <param name="clickSize"> The size of the point used for click detection.</param>
            <param name="size"> The size for the point.</param></member>
        <member name="M:Nutiteq.Styles.PointStyle.SwigGetClassNamePointStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.PointStyle.SwigGetDirectorObjectPointStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.PointStyle.Size">
            <summary>
            Returns the size of the point.
            </summary></member>
        <member name="P:Nutiteq.Styles.PointStyle.ClickSize">
            <summary>
            Returns the size of the point used for click detection.
            </summary></member>
        <member name="P:Nutiteq.Styles.PointStyle.Bitmap">
            <summary>
            Returns the bitmap of the point.
            </summary></member>
        <member name="T:Nutiteq.Styles.PointStyleBuilder">
            <summary>
            A builder class for PointStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.PointStyleBuilder.SwigCreatePolymorphicInstancePointStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.PointStyleBuilder.#ctor">
            <summary>
            Constructs a PointStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.PointStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the PointStyle object using previously set parameters.
            </summary>
            <returns>A new PointStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.PointStyleBuilder.SwigGetClassNamePointStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.PointStyleBuilder.SwigGetDirectorObjectPointStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.PointStyleBuilder.Size">
            <summary>
            Returns the size of the point.
            </summary></member>
        <member name="P:Nutiteq.Styles.PointStyleBuilder.ClickSize">
            <summary>
            Returns the size of the point used for click detection.
            </summary></member>
        <member name="P:Nutiteq.Styles.PointStyleBuilder.Bitmap">
            <summary>
            Returns the bitmap of the point.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Polygon">
            <summary>
            A geometric polygon that can be displayed on the map.
            Polygons can be concave and have multiple overlapping holes.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Polygon.SwigCreatePolymorphicInstancePolygon(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Polygon.Geometry">
            <summary>
            The PolygonGeometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Polygon.#ctor(Nutiteq.Geometry.PolygonGeometry,Nutiteq.Styles.PolygonStyle)">
            <summary>
            Constructs a Polygon object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location and holes of this polygon.</param>
            <param name="style"> The style that defines what this polygon looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon.#ctor(Nutiteq.WrappedCommons.MapPosVector,Nutiteq.Styles.PolygonStyle)">
            <summary>
            Constructs a Polygon object from a vector of map positions and a style.
            </summary>
            <param name="poses"> The vector of map positions that defines the location of this polygon.</param>
            <param name="style"> The style that defines what this polygon looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon.#ctor(Nutiteq.WrappedCommons.MapPosVector,Nutiteq.WrappedCommons.MapPosVectorVector,Nutiteq.Styles.PolygonStyle)">
            <summary>
            Constructs a Polygon object from a vector of map positions, a vector of holes and a style.
            </summary>
            <param name="poses"> The vector of map positions that defines the location of this polygon.</param>
            <param name="holes"> The vector of holes that defines the locations of holes of this polygon.</param>
            <param name="style"> The style that defines what this polygon looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon.setGeometryInternal(Nutiteq.Geometry.PolygonGeometry)">
            <summary>
            Sets the location for this polygon.
            </summary>
            <param name="geometry"> The new geometry object that defines the location and holes of this polygon.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon.GetPoses">
            <summary>
            Returns the vertices that define this polygon.
            </summary>
            <returns>The vector of map positions that define this polygon.</returns></member>
        <member name="M:Nutiteq.VectorElements.Polygon.SetPoses(Nutiteq.WrappedCommons.MapPosVector)">
            <summary>
            Sets the vertices that define this polygon.
            Note: holes are not affected by this call.
            </summary>
            <param name="poses"> The new vector of map positions that define this polygon.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon.GetHoles">
            <summary>
            Returns the holes of the polygon.
            </summary>
            <returns>The list of holes of the polygon.</returns></member>
        <member name="M:Nutiteq.VectorElements.Polygon.SetHoles(Nutiteq.WrappedCommons.MapPosVectorVector)">
            <summary>
            Sets the holes of the polygon.
            </summary>
            <param name="holes"> The list of holes of the polygon.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon.SwigGetClassNamePolygon">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Polygon.SwigGetDirectorObjectPolygon">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Polygon.Style">
            <summary>
            Returns the style of this polygon.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Polygon3D">
            <summary>
            A geometric 3d polygon that can be displayed on the map.
            3d polygons can be concave and have multiple overlapping holes.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.SwigCreatePolymorphicInstancePolygon3D(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Polygon3D.Geometry">
            <summary>
            The PolygonGeometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.#ctor(Nutiteq.Geometry.PolygonGeometry,Nutiteq.Styles.Polygon3DStyle,System.Single)">
            <summary>
            Constructs a Polygon3D object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location and holes of this 3d polygon.</param>
            <param name="style"> The style that defines what this 3d polygon looks like.</param>
            <param name="height"> The height of this 3d polygon in meters.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.#ctor(Nutiteq.WrappedCommons.MapPosVector,Nutiteq.Styles.Polygon3DStyle,System.Single)">
            <summary>
            Constructs a Polygon3D object from a vector of map positions and a style.
            </summary>
            <param name="poses"> The vector of map positions that defines the location of this 3d polygon.</param>
            <param name="style"> The style that defines what this 3d polygon looks like.</param>
            <param name="height"> The height of this 3d polygon in meters.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.#ctor(Nutiteq.WrappedCommons.MapPosVector,Nutiteq.WrappedCommons.MapPosVectorVector,Nutiteq.Styles.Polygon3DStyle,System.Single)">
            <summary>
            Constructs a Polygon3D object from a vector of map positions, a vector of holes and a style.
            </summary>
            <param name="poses"> The vector of map positions that defines the location of this 3d polygon.</param>
            <param name="holes"> The vector of holes that defines the locations of holes of this 3d polygon.</param>
            <param name="style"> The style that defines what this 3d polygon looks like.</param>
            <param name="height"> The height of this 3d polygon in meters.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.setGeometryInternal(Nutiteq.Geometry.PolygonGeometry)">
            <summary>
            Sets the location for this 3d polygon.
            </summary>
            <param name="geometry"> The new geometry object that defines the location and holes of this 3d polygon.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.GetPoses">
            <summary>
            Returns the vertices that define this 3d polygon.
            </summary>
            <returns>The new vector of map positions that define this 3d polygon.</returns></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.SetPoses(Nutiteq.WrappedCommons.MapPosVector)">
            <summary>
            Sets the vertices that define this 3d polygon.
            Note: holes are not affected by this call.
            </summary>
            <param name="poses"> The new vector of map positions that define this 3d polygon.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.GetHoles">
            <summary>
            Returns the holes of the 3d polygon.
            </summary>
            <returns>The list of holes of the 3d polygon.</returns></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.SetHoles(Nutiteq.WrappedCommons.MapPosVectorVector)">
            <summary>
            Sets the holes of the 3d polygon.
            </summary>
            <param name="holes"> The list of holes of the 3d polygon.</param></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.SwigGetClassNamePolygon3D">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Polygon3D.SwigGetDirectorObjectPolygon3D">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Polygon3D.Height">
            <summary>
            Returns the height of this 3d polygon.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Polygon3D.Style">
            <summary>
            Returns the style of this 3d polygon.
            </summary></member>
        <member name="T:Nutiteq.Styles.Polygon3DStyle">
            <summary>
            A style for 3d polygons. Contains attributes for configuring how the 3d polygon is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyle.SwigCreatePolymorphicInstancePolygon3DStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyle.#ctor(Nutiteq.Graphics.Color)">
            <summary>
            Constructs a Polygon3DStyle object from various parameters. Instantiating the object directly is
            not recommended, Polygon3DStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the 3d polygon.</param></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyle.SwigGetClassNamePolygon3DStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyle.SwigGetDirectorObjectPolygon3DStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Styles.Polygon3DStyleBuilder">
            <summary>
            A builder class for Polygon3DStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyleBuilder.SwigCreatePolymorphicInstancePolygon3DStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyleBuilder.#ctor">
            <summary>
            Constructs a Polygon3DStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the Polygon3DStyle object using previously set parameters.
            </summary>
            <returns>A new Polygon3DStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyleBuilder.SwigGetClassNamePolygon3DStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.Polygon3DStyleBuilder.SwigGetDirectorObjectPolygon3DStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Geometry.PolygonGeometry">
            <summary>
            Polygon geometry defined by an outer ring and optional multiple inner rings (holes).
            </summary></member>
        <member name="M:Nutiteq.Geometry.PolygonGeometry.SwigCreatePolymorphicInstancePolygonGeometry(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Geometry.PolygonGeometry.#ctor(Nutiteq.WrappedCommons.MapPosVector)">
            <summary>
            Constructs a PolygonGeometry objects from an outer ring.
            </summary>
            <param name="poses"> The list of map positions defining the outer ring.</param></member>
        <member name="M:Nutiteq.Geometry.PolygonGeometry.#ctor(Nutiteq.WrappedCommons.MapPosVector,Nutiteq.WrappedCommons.MapPosVectorVector)">
            <summary>
            Constructs a PolygonGeometry objects from an outer ring and list of inner rings (holes).
            </summary>
            <param name="poses"> The list of map positions defining the outer ring.</param>
            <param name="holes"> The list of map position lists defining the inner rings.</param></member>
        <member name="M:Nutiteq.Geometry.PolygonGeometry.#ctor(Nutiteq.WrappedCommons.MapPosVectorVector)">
            <summary>
            Constructs a PolygonGeometry objects from a list of rings.
            It is assumed the the first ring is outer ring and all other rings are inner rings.
            </summary>
            <param name="rings"> The list of map position lists defining the rings</param></member>
        <member name="M:Nutiteq.Geometry.PolygonGeometry.SwigGetClassNamePolygonGeometry">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Geometry.PolygonGeometry.SwigGetDirectorObjectPolygonGeometry">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Geometry.PolygonGeometry.Poses">
            <summary>
            Returns the list of map positions defining the outer ring of the polygon.
            </summary></member>
        <member name="P:Nutiteq.Geometry.PolygonGeometry.Holes">
            <summary>
            Returns the list of map position lists defining the inner rings of the polygon (holes).
            </summary></member>
        <member name="P:Nutiteq.Geometry.PolygonGeometry.Rings">
            <summary>
            Returns the list of map position lists defining the rings of the polygon.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.PolygonGeometryVector.PolygonGeometryVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Styles.PolygonStyle">
            <summary>
            A style for polygons. Contains attributes for configuring how the polygon is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.PolygonStyle.SwigCreatePolymorphicInstancePolygonStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.PolygonStyle.#ctor(Nutiteq.Graphics.Color,Nutiteq.Graphics.Bitmap,Nutiteq.Styles.LineStyle)">
            <summary>
            Constructs a PolygonStyle object from various parameters. Instantiating the object directly is
            not recommended, PolygonStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the polygon.</param>
            <param name="bitmap"> The bitmap for the polygon.</param>
            <param name="lineStyle"> The line style for the edges of the polygon. May be null.</param></member>
        <member name="M:Nutiteq.Styles.PolygonStyle.SwigGetClassNamePolygonStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.PolygonStyle.SwigGetDirectorObjectPolygonStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.PolygonStyle.LineStyle">
            <summary>
            Returns the style of the edges of the polygon.
            </summary></member>
        <member name="P:Nutiteq.Styles.PolygonStyle.Bitmap">
            <summary>
            Returns the bitmap of the polygon.
            </summary></member>
        <member name="T:Nutiteq.Styles.PolygonStyleBuilder">
            <summary>
            A builder class for PolygonStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.PolygonStyleBuilder.SwigCreatePolymorphicInstancePolygonStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.PolygonStyleBuilder.#ctor">
            <summary>
            Constructs a PolygonStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.PolygonStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the PolygonStyle object using previously set parameters.
            </summary>
            <returns>A new PolygonStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.PolygonStyleBuilder.SwigGetClassNamePolygonStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.PolygonStyleBuilder.SwigGetDirectorObjectPolygonStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.PolygonStyleBuilder.LineStyle">
            <summary>
            Returns the line style of the edges of the polygon.
            </summary></member>
        <member name="T:Nutiteq.VectorElements.Popup">
            <summary>
            An abstract billboard element that can be displayed on the map. It
            always faces the camera and has a dynamically drawn bitmap.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Popup.SwigCreatePolymorphicInstancePopup(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Popup.Style">
            <summary>
            The PopupStyle property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Popup.#ctor(Nutiteq.VectorElements.Billboard,Nutiteq.Styles.PopupStyle)">
            <summary>
            Constructs an abstract Popup object with the specified style and attaches it to a billboard element.
            </summary>
            <param name="baseBillboard"> The billboard this popup will be attached to.</param>
            <param name="style"> The style that defines what this popup looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Popup.#ctor(Nutiteq.Geometry.Geometry,Nutiteq.Styles.PopupStyle)">
            <summary>
            Constructs an abstract Popup object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this popup.</param>
            <param name="style"> The style that defines what this popup looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Popup.#ctor(Nutiteq.Core.MapPos,Nutiteq.Styles.PopupStyle)">
            <summary>
            Constructs an abstract Popup object from a map position and a style.
            </summary>
            <param name="pos"> The map position that defines the location of this popup.</param>
            <param name="style"> The style that defines what this popup looks like.</param></member>
        <member name="M:Nutiteq.VectorElements.Popup.DrawBitmap(Nutiteq.Core.ScreenPos,System.Single,System.Single,System.Single)">
            <summary>
            Draws a custom bitmap for this Popup that will be used for drawing the Popup on the map.
            The method is called each time the Popup gets reloaded internally.
            </summary>
            <param name="anchorScreenPos"> The screen position of the anchor point of this popup in pixels.</param>
            <param name="screenWidth"> The current screen width in pixels.</param>
            <param name="screenHeight"> The current screen height in pixels.</param>
            <param name="dpToPX"> The value used for converting display independent pixels (dp) to pixels (px).</param>
            <returns>The custom Popup bitmap.</returns></member>
        <member name="M:Nutiteq.VectorElements.Popup.SetAnchorPoint(System.Single,System.Single)">
            <summary>
            Sets the anchor point for the popup. It should only be called from
            Popup::drawBitmap method, to match the anchor point to the drawn bitmap.
            Values will be clamped to [-1, 1] range.
            </summary>
            <param name="anchorPointX"> The new horizontal anchor point for the popup. -1 means the left side,
            0 the center and 1 the right side of the popup. The default is 0.</param>
            <param name="anchorPointY"> The vertical anchor point for the popup. -1 means the bottom,
            0 the center and 1 the top of the popup. The default is -1.</param></member>
        <member name="M:Nutiteq.VectorElements.Popup.getStyleInternal">
            <summary>
            Returns the style of this Popup.
            </summary>
            <returns>The style that defines what this Popup looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.Popup.setStyleInternal(Nutiteq.Styles.PopupStyle)">
            <summary>
            Sets the style for this Popup.
            </summary>
            <returns>The new style that defines what this popup looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.Popup.SwigGetClassNamePopup">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Popup.SwigGetDirectorObjectPopup">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Popup.AnchorPointX">
            <summary>
            Returns the horizontal anchor point of this popup.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Popup.AnchorPointY">
            <summary>
            Returns the vertical anchor point of this popup.
            </summary></member>
        <member name="T:Nutiteq.Styles.PopupStyle">
            <summary>
            A style for popups. Contains attributes for configuring how the popup is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.PopupStyle.SwigCreatePolymorphicInstancePopupStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.PopupStyle.#ctor(Nutiteq.Graphics.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Constructs a PopupStyle object from various parameters. Instantiating the object directly is
            not recommended, PopupStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the popup.</param>
            <param name="attachAnchorPointX"> The horizontal attaching anchor point for the popup.</param>
            <param name="attachAnchorPointY"> The vertical attaching anchor point for the popup.</param>
            <param name="causesOverlap"> The causes overlap flag for the popup.</param>
            <param name="hideIfOverlapped"> The hide if overlapped flag for the popup.</param>
            <param name="horizontalOffset"> The horizontal offset for the popup.</param>
            <param name="verticalOffset"> The vertical offset for the popup.</param>
            <param name="placementPriority"> The placement priority for the popup.</param>
            <param name="scaleWithDPI"> The scale with DPI flag for the label.</param></member>
        <member name="M:Nutiteq.Styles.PopupStyle.SwigGetClassNamePopupStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.PopupStyle.SwigGetDirectorObjectPopupStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Styles.PopupStyleBuilder">
            <summary>
            A builder class for PopupStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.PopupStyleBuilder.SwigCreatePolymorphicInstancePopupStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.PopupStyleBuilder.#ctor">
            <summary>
            Constructs a PopupStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.PopupStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the PopupStyle object using previously set parameters.
            </summary>
            <returns>A new PopupStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.PopupStyleBuilder.SwigGetClassNamePopupStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.PopupStyleBuilder.SwigGetDirectorObjectPopupStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Projections.Projection">
            <summary>
            An abstract base class for all projections.
            </summary></member>
        <member name="M:Nutiteq.Projections.Projection.SwigCreatePolymorphicInstanceProjection(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Projections.Projection.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.GetBounds">
            <summary>
            Returns the bounds of this projection.
            </summary>
            <returns>The bounds of this projection.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.GetLocalScale(Nutiteq.Core.MapPos)">
            <summary>
            Returns local scale for the specified position.
            </summary>
            <param name="pos"> The position in the internal coordinate system.</param>
            <returns>The local scale for the specified position.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.FromInternalScale(System.Double)">
            <summary>
            Converts internal size to meters at the equator.
            </summary>
            <param name="size"> The size in the internal coordinate system.</param>
            <returns>The approximate size in meters at the equator.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.FromWgs84(Nutiteq.Core.MapPos)">
            <summary>
            Transforms a position from the WGS84 coordinate system to the coordinate system of this projection.
            </summary>
            <param name="pos"> The position in the WGS84 coordinate system.</param>
            <returns>The transformed position in the coordinate system of this projection.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.ToWgs84(Nutiteq.Core.MapPos)">
            <summary>
            Transforms a position from the coordinate system of this projection to the WGS84 coordinate system.
            </summary>
            <param name="pos"> The position in the coordinate system of this projection.</param>
            <returns>The transformed position in the WGS84 coordinate system.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.SwigGetClassNameProjection">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Projections.Projection.SwigGetDirectorObjectProjection">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Projections.Projection.Name">
            <summary>
            Return name of this projection in Well-Known format. For example, as "EPSG:3857"
            </summary></member>
        <member name="T:Nutiteq.Components.ProjectionMode">
            <summary>
            Possible projection modes.
            </summary></member>
        <member name="F:Nutiteq.Components.ProjectionMode.ProjectionModeOrthogonal">
            <summary>
            Orthogonal projection mode means that the size of the objects on the screen
            does not depend on their distance from the camera. This might be useful because it
            avoids perspective distortion, but it becomes unusable at small tilt angles.
            This is sometimes confused with isometric projection which is a subtype of
            orthogonal projection.
            </summary></member>
        <member name="F:Nutiteq.Components.ProjectionMode.ProjectionModePerspective">
            <summary>
            Perspective projection means that the further away objects get from the camera the smaller
            they appear on the screen. This projection mode is used in most 3D games and applications.
            </summary></member>
        <member name="T:Nutiteq.Layers.RasterTileLayer">
            <summary>
            A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
            </summary></member>
        <member name="M:Nutiteq.Layers.RasterTileLayer.SwigCreatePolymorphicInstanceRasterTileLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.Layers.RasterTileLayer.TileLoadListener">
            <summary>
            The TileLoadListener property.
            </summary></member>
        <member name="M:Nutiteq.Layers.RasterTileLayer.#ctor(Nutiteq.DataSources.TileDataSource)">
            <summary>
            Constructs a RasterTileLayer object from a data source.
            </summary>
            <param name="dataSource"> The data source from which this layer loads data.</param></member>
        <member name="M:Nutiteq.Layers.RasterTileLayer.getTileLoadListenerInternal">
            <summary>
            Returns the tile load listener.
            </summary>
            <returns>The tile load listener.</returns></member>
        <member name="M:Nutiteq.Layers.RasterTileLayer.setTileLoadListenerInternal(Nutiteq.Layers.TileLoadListener)">
            <summary>
            Sets the tile load listener.
            </summary>
            <param name="tileLoadListener"> The tile load listener.</param></member>
        <member name="M:Nutiteq.Layers.RasterTileLayer.SwigGetClassNameRasterTileLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.RasterTileLayer.SwigGetDirectorObjectRasterTileLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Layers.RasterTileLayer.Opacity">
            <summary>
            Returns the opacity of the layer.
            </summary></member>
        <member name="P:Nutiteq.Layers.RasterTileLayer.FrameNr">
            <summary>
            Returns the current frame number.
            </summary></member>
        <member name="P:Nutiteq.Layers.RasterTileLayer.SynchronizedRefresh">
            <summary>
            Returns the state of the synchronized refresh flag.
            </summary></member>
        <member name="P:Nutiteq.Layers.RasterTileLayer.TextureCacheCapacity">
            <summary>
            Returns the tile texture cache capacity.
            </summary></member>
        <member name="T:Nutiteq.Ui.RedrawRequestListener">
            <summary>
            An internal listener class for notifying about screen redraw requests.
            </summary></member>
        <member name="M:Nutiteq.Ui.RedrawRequestListener.SwigCreatePolymorphicInstanceRedrawRequestListener(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Ui.RedrawRequestListener.OnRedrawRequested">
            <summary>
            Called when the screen needs to be redrawn.
            </summary></member>
        <member name="M:Nutiteq.Ui.RedrawRequestListener.SwigGetClassNameRedrawRequestListener">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Ui.RedrawRequestListener.SwigGetDirectorObjectRedrawRequestListener">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Core.ScreenBounds">
            <summary>
            A container class that defines a bounding box on the screen using minimum and maximum screen positions.
            </summary></member>
        <member name="M:Nutiteq.Core.ScreenBounds.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.#ctor">
            <summary>
            Constructs an empty ScreenBounds object. The coordinates of the minimum position will be
            set to positive infinity and the coordinates of the maximum position will be
            set to negative infinity.
            </summary></member>
        <member name="M:Nutiteq.Core.ScreenBounds.#ctor(Nutiteq.Core.ScreenPos,Nutiteq.Core.ScreenPos)">
            <summary>
            Constructs a ScreenBounds object from a minimum and maximum position. If a coordinate of the
            minimum positon is larger than the same coordinate of the maximum position then those
            coordinates will be swapped.
            </summary>
            <param name="min"> The minimum position.</param>
            <param name="max"> The maximum position.</param></member>
        <member name="M:Nutiteq.Core.ScreenBounds.EqualsInternal(Nutiteq.Core.ScreenBounds)">
            <summary>
            Checks for equality between this and another screen bounds object.
            </summary>
            <param name="ScreenBounds"> The other screen bounds object.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.GetWidth">
            <summary>
            Returns the width of the bounds object.
            </summary>
            <returns>The width on the bounds object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.GetHeight">
            <summary>
            Returns the height of the bounds object.
            </summary>
            <returns>The height on the bounds object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.Contains(Nutiteq.Core.ScreenPos)">
            <summary>
            Tests whether this screen bounds object contains a screen position.
            </summary>
            <param name="pos"> The screen position.</param>
            <returns>True if this screen bounds object contains the screen position.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.Contains(Nutiteq.Core.ScreenBounds)">
            <summary>
            Tests whether this screen bounds object contains a another screen bounds object.
            </summary>
            <param name="bounds"> The other screen bounds object.</param>
            <returns>True if this screen bounds object contains the other screen bounds object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.Intersects(Nutiteq.Core.ScreenBounds)">
            <summary>
            Tests whether this screen bounds object intersects with a another screen bounds object.
            </summary>
            <param name="bounds"> The other screen bounds object.</param>
            <returns>True if this screen bounds object intersects with the other screen bounds object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenBounds.ToString">
            <summary>
            Creates a string representation of this screen bounds object, useful for logging.
            </summary>
            <returns>The string representation of this screen bounds object.</returns></member>
        <member name="P:Nutiteq.Core.ScreenBounds.Min">
            <summary>
            Returns the minimum screen position.
            </summary></member>
        <member name="P:Nutiteq.Core.ScreenBounds.Max">
            <summary>
            Returns the maximum screen position of this screen envelope object.
            </summary></member>
        <member name="P:Nutiteq.Core.ScreenBounds.Center">
            <summary>
            Calculates the center screen position of this screen envelope object.
            </summary></member>
        <member name="T:Nutiteq.Core.ScreenPos">
            <summary>
            A screen position defined by x,y floating point numbers.
            </summary></member>
        <member name="M:Nutiteq.Core.ScreenPos.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.ScreenPos.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenPos.#ctor">
            <summary>
            Constructs a ScreenPos object. All coordinates will be 0.
            </summary></member>
        <member name="M:Nutiteq.Core.ScreenPos.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a ScreenPos object from 2 coordinates.
            </summary>
            <param name="x"> The x coordinate.</param>
            <param name="y"> The y coordinate.</param></member>
        <member name="M:Nutiteq.Core.ScreenPos.EqualsInternal(Nutiteq.Core.ScreenPos)">
            <summary>
            Checks for equality between this and another screen position.
            </summary>
            <param name="p"> The other screen position.</param>
            <returns>True if equal.</returns></member>
        <member name="M:Nutiteq.Core.ScreenPos.GetHashCodeInternal">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.ScreenPos.ToString">
            <summary>
            Creates a string representation of this screen position, useful for logging.
            </summary>
            <returns>The string representation of this screen position.</returns></member>
        <member name="P:Nutiteq.Core.ScreenPos.X">
            <summary>
            Returns the x coordinate of this position.
            </summary></member>
        <member name="P:Nutiteq.Core.ScreenPos.Y">
            <summary>
            Returns the y coordinate of this position.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.ScreenPosVector.ScreenPosVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.DataSources.SqliteNMLModelLODTreeDataSource">
            <summary>
            A sqlite database based data source for NML model LOD trees. The database must be created using
            custom toolkit from Nutiteq that supports several input formats like KMZ or GeoJSON.
            </summary></member>
        <member name="M:Nutiteq.DataSources.SqliteNMLModelLODTreeDataSource.SwigCreatePolymorphicInstanceSqliteNMLModelLODTreeDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.DataSources.SqliteNMLModelLODTreeDataSource.#ctor(Nutiteq.Projections.Projection,System.String)">
            <summary>
            Constructs a SqliteNMLModelLODTreeDataSource object.
            </summary>
            <param name="projection"> The projection for the database. Currently only EPSG3857 is supported.</param>
            <param name="fileName"> The file name of the sqlite database file.</param></member>
        <member name="M:Nutiteq.DataSources.SqliteNMLModelLODTreeDataSource.SwigGetClassNameSqliteNMLModelLODTreeDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.SqliteNMLModelLODTreeDataSource.SwigGetDirectorObjectSqliteNMLModelLODTreeDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.WrappedCommons.StringMap.StringMapEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.WrappedCommons.StringVector.StringVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Styles.Style">
            <summary>
            A base class for other Style objects.
            </summary></member>
        <member name="M:Nutiteq.Styles.Style.SwigCreatePolymorphicInstanceStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.Style.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Styles.Style.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Styles.Style.SwigGetClassNameStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.Style.SwigGetDirectorObjectStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.Style.Color">
            <summary>
            Returns the color of the vector element.
            </summary></member>
        <member name="T:Nutiteq.Styles.StyleBuilder">
            <summary>
            A base class for other StyleBuilder subclasses.
            </summary></member>
        <member name="M:Nutiteq.Styles.StyleBuilder.SwigCreatePolymorphicInstanceStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.StyleBuilder.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Styles.StyleBuilder.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Styles.StyleBuilder.SwigGetClassNameStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.StyleBuilder.SwigGetDirectorObjectStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.StyleBuilder.Color">
            <summary>
            Returns the color of the vector element.
            </summary></member>
        <member name="T:Nutiteq.Styles.StyleSelector">
            <summary>
            A collection of style rules.
            </summary></member>
        <member name="M:Nutiteq.Styles.StyleSelector.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Styles.StyleSelector.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="T:Nutiteq.Styles.StyleSelectorBuilder">
            <summary>
            Builder class for style selectors.
            </summary></member>
        <member name="M:Nutiteq.Styles.StyleSelectorBuilder.#ctor">
            <summary>
            Constructs a new empty builder.
            </summary></member>
        <member name="M:Nutiteq.Styles.StyleSelectorBuilder.AddRule(System.String,Nutiteq.Styles.Style)">
            <summary>
            Adds new rule to the builder rule set. The rules are defined by a filter expression and corresponding style.
            Filter expressions are defined using simple built-in SQL like language with the following properties:
            - The following boolean operators are supported: AND, OR, NOT.
            - The following predicates are supported: IS NULL, IS NOT NULL, =, &lt;&gt;, &lt;=, &gt;=, &lt;, &gt;.
            - Operator precedence is similar to SQL (NOT &gt; AND &gt; OR), parenthesis can be used to group expressions.
            - There are few prebuilt variables (view::zoom, geometry::type), other variables correspond to metadata values.
            </summary>
            <param name="expr"> The filter expression to use for this rule. For example, "geometry::type = 'linestring' AND type = 'road'"</param>
            <param name="style"> The style for this rule.</param>
            <returns>Self.</returns></member>
        <member name="M:Nutiteq.Styles.StyleSelectorBuilder.AddRule(Nutiteq.Styles.Style)">
            <summary>
            Adds new rule to the builder rule set. This method should be used to add the 'default' style, if no filter needs to be applied.
            </summary>
            <param name="style"> The style for this rule.</param>
            <returns>Self.</returns></member>
        <member name="M:Nutiteq.Styles.StyleSelectorBuilder.BuildSelector">
            <summary>
            Builds a new style selector from the added rule list.
            </summary>
            <returns>Style selector with all the added rules.</returns></member>
        <member name="T:Nutiteq.VectorElements.Text">
            <summary>
            A text element that can be displayed on the map.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Text.SwigCreatePolymorphicInstanceText(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.Text.Style">
            <summary>
            The TextStyle property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.Text.#ctor(Nutiteq.VectorElements.Billboard,Nutiteq.Styles.TextStyle,System.String)">
            <summary>
            Constructs a Text object with the specified style and attaches it to a billboard element.
            </summary>
            <param name="baseBillboard"> The billboard this text label will be attached to.</param>
            <param name="style"> The style that defines what this text label looks like.</param>
            <param name="text"> The text to be displayed.</param></member>
        <member name="M:Nutiteq.VectorElements.Text.#ctor(Nutiteq.Geometry.Geometry,Nutiteq.Styles.TextStyle,System.String)">
            <summary>
            Constructs a Text object from a geometry object and a style.
            </summary>
            <param name="geometry"> The geometry object that defines the location of this text label.</param>
            <param name="style"> The style that defines what this text label looks like.</param>
            <param name="text"> The text to be displayed.</param></member>
        <member name="M:Nutiteq.VectorElements.Text.#ctor(Nutiteq.Core.MapPos,Nutiteq.Styles.TextStyle,System.String)">
            <summary>
            Constructs a Text object from a map position and a style.
            </summary>
            <param name="pos"> The map position that defines the location of this text label.</param>
            <param name="style"> The style that defines what this text label looks like.</param>
            <param name="text"> The text to be displayed.</param></member>
        <member name="M:Nutiteq.VectorElements.Text.getStyleInternal">
            <summary>
            Returns the style of this text label.
            </summary>
            <returns>The style that defines what this text label looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.Text.setStyleInternal(Nutiteq.Styles.TextStyle)">
            <summary>
            Sets the style for this text label.
            </summary>
            <returns>The new style that defines what this text label looks like.</returns></member>
        <member name="M:Nutiteq.VectorElements.Text.SwigGetClassNameText">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.Text.SwigGetDirectorObjectText">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.Text.Title">
            <summary>
            Returns the display text.
            </summary></member>
        <member name="T:Nutiteq.Styles.TextStyle">
            <summary>
            A style for text labels. Contains attributes for configuring how the text label is drawn on the screen.
            </summary></member>
        <member name="M:Nutiteq.Styles.TextStyle.SwigCreatePolymorphicInstanceTextStyle(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.TextStyle.#ctor(Nutiteq.Graphics.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single,System.Boolean,Nutiteq.Styles.BillboardOrientation,Nutiteq.Styles.BillboardScaling,System.String,System.String,System.Int32,Nutiteq.Graphics.Color,System.Single)">
            <summary>
            Constructs a TextStyle object from various parameters. Instantiating the object directly is
            not recommended, TextStyleBuilder should be used instead.
            </summary>
            <param name="color"> The color for the text.</param>
            <param name="attachAnchorPointX"> The horizontal attaching anchor point.</param>
            <param name="attachAnchorPointY"> The vertical attaching anchor point.</param>
            <param name="causesOverlap"> The causes overlap flag for the billboard.</param>
            <param name="hideIfOverlapped"> The hide if overlapped flag for the billboard.</param>
            <param name="horizontalOffset"> The horizontal offset.</param>
            <param name="verticalOffset"> The vertical offset.</param>
            <param name="placementPriority"> The placement priority.</param>
            <param name="scaleWithDPI"> The scale with DPI flag for the label.</param>
            <param name="anchorPointX"> The horizontal anchor point.</param>
            <param name="anchorPointY"> The vertical anchor point.</param>
            <param name="flippable"> The fliappble flag.</param>
            <param name="orientationMode"> The orientation mode.</param>
            <param name="scalingMode"> The scaling mode.</param>
            <param name="fontName"> The font's name.</param>
            <param name="textField"> The text field variable to use.</param>
            <param name="fontSize"> The font's size.</param>
            <param name="strokeColor"> The width of the color.</param>
            <param name="strokeWidth"> The width of the stroke.</param></member>
        <member name="M:Nutiteq.Styles.TextStyle.SwigGetClassNameTextStyle">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.TextStyle.SwigGetDirectorObjectTextStyle">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.TextStyle.FontColor">
            <summary>
            Returns the font's color.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyle.FontName">
            <summary>
            Returns the font's name.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyle.TextField">
            <summary>
            Returns the text field variable to use.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyle.FontSize">
            <summary>
            Returns the font's size.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyle.StrokeColor">
            <summary>
            Returns the color of the stroke.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyle.StrokeWidth">
            <summary>
            Returns the width of the stroke.
            </summary></member>
        <member name="T:Nutiteq.Styles.TextStyleBuilder">
            <summary>
            A builder class for TextStyle.
            </summary></member>
        <member name="M:Nutiteq.Styles.TextStyleBuilder.SwigCreatePolymorphicInstanceTextStyleBuilder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Styles.TextStyleBuilder.#ctor">
            <summary>
            Constructs a TextStyleBuilder object with all parameters set to defaults.
            </summary></member>
        <member name="M:Nutiteq.Styles.TextStyleBuilder.BuildStyle">
            <summary>
            Builds a new instance of the TextStyle object using previously set parameters.
            </summary>
            <returns>A new TextStyle object.</returns></member>
        <member name="M:Nutiteq.Styles.TextStyleBuilder.SwigGetClassNameTextStyleBuilder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Styles.TextStyleBuilder.SwigGetDirectorObjectTextStyleBuilder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Styles.TextStyleBuilder.FontName">
            <summary>
            Returns the font name for the text label.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyleBuilder.TextField">
            <summary>
            Returns the text field variable. If not empty, this variable is used to read actual text string from object meta info.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyleBuilder.FontSize">
            <summary>
            Returns the font size for the text label.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyleBuilder.StrokeColor">
            <summary>
            Returns the stroke color for the text label.
            </summary></member>
        <member name="P:Nutiteq.Styles.TextStyleBuilder.StrokeWidth">
            <summary>
            Returns the stroke width for the text label.
            </summary></member>
        <member name="T:Nutiteq.Core.TileData">
            <summary>
            A wrapper class for tile data.
            </summary></member>
        <member name="M:Nutiteq.Core.TileData.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Core.TileData.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Core.TileData.#ctor(Nutiteq.WrappedCommons.UnsignedCharVector)">
            <summary>
            Constructs a TileData object from a data blob.
            </summary>
            <param name="data"> The source tile data.</param></member>
        <member name="P:Nutiteq.Core.TileData.MaxAge">
            <summary>
            Returns the maximum age of the tile data, tile data will expire after that point.
            </summary></member>
        <member name="P:Nutiteq.Core.TileData.ReplaceWithParent">
            <summary>
            Returns true if the tile should be replaced with parent tile.
            </summary></member>
        <member name="P:Nutiteq.Core.TileData.Data">
            <summary>
            Returns tile data as a byte vector.
            </summary></member>
        <member name="T:Nutiteq.DataSources.TileDataSource">
            <summary>
            Abstract base class for tile data sources. It provides default implementation
            for listener registration and other common tile data source methods.
            </summary></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.SwigCreatePolymorphicInstanceTileDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.DataSources.TileDataSource.Projection">
            <summary>
            The Projection property.
            </summary></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an abstract TileDataSource object.
            Note: EPSG3857 projection is used.
            </summary>
            <param name="minZoom"> The minimum zoom level supported by this data source.</param>
            <param name="maxZoom"> The maximum zoom level supported by this data source.</param></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.getProjectionInternal">
            <summary>
            Returns the projection of this tile source.
            </summary>
            <returns>The projection of this tile source.</returns></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.LoadTile(Nutiteq.Core.MapTile)">
            <summary>
            Loads the specified tile.
            </summary>
            <param name="tile"> The tile to load.</param>
            <returns>The tile data. If the tile is not available, null may be returned.</returns></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.NotifyTilesChanged(System.Boolean)">
            <summary>
            Notifies listeners that the tiles have changed. Action taken depends on the implementation of the
            listeners, but generally all cached tiles will be reloaded. If the removeTiles flag is set all caches will be cleared
            prior to reloading, if it's not set then the reloaded tiles will replace the old tiles in caches as they finish loading.
            </summary>
            <param name="removeTiles"> The remove tiles flag.</param></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.SwigGetClassNameTileDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.TileDataSource.SwigGetDirectorObjectTileDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.DataSources.TileDataSource.MinZoom">
            <summary>
            Returns the minimum zoom level supported by this data source.
            </summary></member>
        <member name="P:Nutiteq.DataSources.TileDataSource.MaxZoom">
            <summary>
            Returns the maximum zoom level supported by this data source.
            </summary></member>
        <member name="T:Nutiteq.Layers.TileLayer">
            <summary>
            An abstract base class for all tile layers.
            </summary></member>
        <member name="M:Nutiteq.Layers.TileLayer.SwigCreatePolymorphicInstanceTileLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.Layers.TileLayer.DataSource">
            <summary>
            The TileDataSource property.
            </summary></member>
        <member name="M:Nutiteq.Layers.TileLayer.getDataSourceInternal">
            <summary>
            Returns the data source assigned to this layer.
            </summary>
            <returns>The tile data source assigned to this layer.</returns></member>
        <member name="M:Nutiteq.Layers.TileLayer.CalculateMapTile(Nutiteq.Core.MapPos,System.Int32)">
            <summary>
            Calculate tile corresponding to given geographical coordinates and zoom level.
            Note: zoom level bias is NOT applied, only discrete zoom level is used.
            </summary>
            <param name="mapPos"> Coordinates of the point in data source projection coordinate system.</param>
            <param name="zoom"> Zoom level to use for the tile.</param>
            <returns>corresponding map tile.</returns></member>
        <member name="M:Nutiteq.Layers.TileLayer.CalculateMapTileOrigin(Nutiteq.Core.MapTile)">
            <summary>
            Calculate origin map coordinates of given map tile.
            </summary>
            <param name="mapTile"> The map tile to use.</param>
            <returns>corresponding coordinates of the tile origin in data source projection coordinate system.</returns></member>
        <member name="M:Nutiteq.Layers.TileLayer.ClearTileCaches(System.Boolean)">
            <summary>
            Clear layer tile caches. This will release memory allocated to tiles.
            </summary>
            <param name="all"> True if all tiles should be released, otherwise only preloading (invisible) tiles are released.</param></member>
        <member name="M:Nutiteq.Layers.TileLayer.SwigGetClassNameTileLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.TileLayer.SwigGetDirectorObjectTileLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Layers.TileLayer.Preloading">
            <summary>
            Returns the state of the preloading flag of this layer.
            </summary></member>
        <member name="P:Nutiteq.Layers.TileLayer.TileSubstitutionPolicy">
            <summary>
            Returns the current tile substitution policy.
            </summary></member>
        <member name="P:Nutiteq.Layers.TileLayer.ZoomLevelBias">
            <summary>
            Gets the current zoom level bias for this layer.
            </summary></member>
        <member name="T:Nutiteq.Layers.TileLoadListener">
            <summary>
            Interface for monitoring tile loading events.
            </summary></member>
        <member name="M:Nutiteq.Layers.TileLoadListener.SwigCreatePolymorphicInstanceTileLoadListener(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Layers.TileLoadListener.OnVisibleTilesLoaded">
            <summary>
            Listener method that gets called when all visible raster tiles have finished loading.
            </summary></member>
        <member name="M:Nutiteq.Layers.TileLoadListener.OnPreloadingTilesLoaded">
            <summary>
            Listener method that gets called when all preloading raster tiles have finished loading.
            This method gets called after onVisibleTilesLoaded() and only if preloading is enabled.
            </summary></member>
        <member name="M:Nutiteq.Layers.TileLoadListener.SwigGetClassNameTileLoadListener">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.TileLoadListener.SwigGetDirectorObjectTileLoadListener">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.Layers.TileSubstitutionPolicy">
            <summary>
            The policy to use when looking for tiles that are not available.
            </summary></member>
        <member name="F:Nutiteq.Layers.TileSubstitutionPolicy.TileSubstitutionPolicyAll">
            <summary>
            Consider all cached/loaded tiles.
            </summary></member>
        <member name="F:Nutiteq.Layers.TileSubstitutionPolicy.TileSubstitutionPolicyVisible">
            <summary>
            Consider only tiles that are currently visible.
            This is recommended for low-latency data sources, like offline sources.
            </summary></member>
        <member name="F:Nutiteq.Layers.TileSubstitutionPolicy.TileSubstitutionPolicyNone">
            <summary>
            Never substitute tiles.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.UnsignedCharVector.UnsignedCharVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.DataSources.VectorDataSource">
            <summary>
            Abstract base class for envelope based vector data sources. It provides default implementation
            for listener registration and other common data source methods.
            Subclasses need to define their own implementations of loadElements method.
            </summary>
            <summary>
            The draw order of vector elements within the data source is undefined.
            </summary></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.SwigCreatePolymorphicInstanceVectorDataSource(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.DataSources.VectorDataSource.Projection">
            <summary>
            The Projection property.
            </summary></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.#ctor(Nutiteq.Projections.Projection)">
            <summary>
            Constructs an abstract UnculledVectorDataSource object.
            </summary>
            <param name="projection"> The projection used by this data source.</param></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.getProjectionInternal">
            <summary>
            Returns the projection used by this data source.
            </summary>
            <returns>The projection used by this data source.</returns></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.LoadElements(Nutiteq.Renderers.Components.CullState)">
            <summary>
            Loads all the elements within the defined envelope.
            </summary>
            <param name="cullState"> State for describing view parameters and conservative view envelope.</param>
            <returns>The vector of loaded vector elements. If no elements are available, null may be returned.</returns></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.NotifyElementsChanged">
            <summary>
            Notifies listeners that all vector elements have changed. This method refreshes all the existing
            vector elements in the data source.
            </summary></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.SwigGetClassNameVectorDataSource">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.DataSources.VectorDataSource.SwigGetDirectorObjectVectorDataSource">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.VectorElements.VectorElement">
            <summary>
            A base class for all vector elements (points, lines, texts, models, etc).
            </summary></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.SwigCreatePolymorphicInstanceVectorElement(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.VectorElement.Geometry">
            <summary>
            The Geometry property.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.getGeometryInternal">
            <summary>
            Returns the geometry object that defines the location of this vector element.
            </summary>
            <returns>The geometry object of this vector element.</returns></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.GetMetaData">
            <summary>
            Returns a modifiable meta data map. Users may add their data as key-value pairs.
            </summary>
            <returns>The modifiable meta data map of this vector element.</returns></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.SetMetaData(Nutiteq.WrappedCommons.StringMap)">
            <summary>
            Sets a new meta data map for the vector element. Old meta data values will be lost.
            </summary>
            <param name="metaData"> The new meta data map for this vector element.</param></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.GetMetaDataElement(System.String)">
            <summary>
            Returns a meta data element corresponding to the key. If no value is found an empty string is returned.
            </summary>
            <returns>The value corresponding to the key from the meta data map. May be null.</returns></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.SetMetaDataElement(System.String,System.String)">
            <summary>
            Adds a new key-value pair to the meta data map. If the key already exists in the map,
            it's value will be replaced by the new value.
            </summary>
            <param name="key"> The new key.</param>
            <param name="element"> The new value.</param></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.NotifyElementChanged">
            <summary>
            Notifies this vector element's datasource about the change in this element.
            The data source may then notify the layer to update the view.
            </summary></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.SwigGetClassNameVectorElement">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorElements.VectorElement.SwigGetDirectorObjectVectorElement">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorElements.VectorElement.Id">
            <summary>
            Returns the internal id of this vector element.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.VectorElement.Visible">
            <summary>
            Returns the state of the visibility flag of this vector element.
            </summary></member>
        <member name="P:Nutiteq.VectorElements.VectorElement.Bounds">
            <summary>
            Returns the bounds of this vector element.
            </summary></member>
        <member name="T:Nutiteq.Ui.VectorElementClickInfo">
            <summary>
            A container class that provies information about a click performed on
            a vector element.
            </summary></member>
        <member name="P:Nutiteq.Ui.VectorElementClickInfo.VectorElement">
            <summary>
            The VectorElement property.
            </summary></member>
        <member name="P:Nutiteq.Ui.VectorElementClickInfo.Layer">
            <summary>
            The Layer property.
            </summary></member>
        <member name="M:Nutiteq.Ui.VectorElementClickInfo.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Ui.VectorElementClickInfo.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Ui.VectorElementClickInfo.getVectorElementInternal">
            <summary>
            Returns the clicked vector element.
            </summary>
            <returns>The vector element on which the click was performed.</returns></member>
        <member name="M:Nutiteq.Ui.VectorElementClickInfo.getLayerInternal">
            <summary>
            Returns the layer of the clicked vector element.
            </summary>
            <returns>The layer of the vector element on which the click was performed.</returns></member>
        <member name="P:Nutiteq.Ui.VectorElementClickInfo.ClickPos">
            <summary>
            Returns the click position.
            </summary></member>
        <member name="P:Nutiteq.Ui.VectorElementClickInfo.ElementClickPos">
            <summary>
            Returns the position on the clicked element, that is close to the click position.
            For points it will always be the center position, for lines it will be the closest point
            on the line, for billboards it will be the anchor point and for polygons it's equal to
            getClickPos().
            </summary></member>
        <member name="P:Nutiteq.Ui.VectorElementClickInfo.Distance">
            <summary>
            Returns the distance from the vector element to the camera.
            </summary></member>
        <member name="P:Nutiteq.Ui.VectorElementClickInfo.Order">
            <summary>
            Returns the relative draw order of the vector element.
            </summary></member>
        <member name="T:Nutiteq.WrappedCommons.VectorElementClickInfoVector.VectorElementClickInfoVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.WrappedCommons.VectorElementVector.VectorElementVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.</member>
        <member name="T:Nutiteq.Ui.VectorElementsClickInfo">
            <summary>
            A container class that stores information about clicked vector elements.
            </summary>
            <summary>
            A single click may result in multiple vector elements being returned, all of which are
            located at the click position. If that's the case, the vector elements will be sorted
            by their distance to the camera and their draw order. The first VectorElementClickInfo in the
            vector of VectorElementClickInfos corresponds to the top-most element on the screen.
            </summary></member>
        <member name="M:Nutiteq.Ui.VectorElementsClickInfo.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Ui.VectorElementsClickInfo.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="P:Nutiteq.Ui.VectorElementsClickInfo.VectorElementClickInfos">
            <summary>
            Returns the sorted list of VectorElementClickInfo objects.
            </summary></member>
        <member name="P:Nutiteq.Ui.VectorElementsClickInfo.ClickType">
            <summary>
            Returns the click type.
            </summary></member>
        <member name="T:Nutiteq.Layers.VectorLayer">
            <summary>
            A vector layer that loads data using an envelope. Should be used together with corresponding data source.
            </summary></member>
        <member name="M:Nutiteq.Layers.VectorLayer.SwigCreatePolymorphicInstanceVectorLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="P:Nutiteq.Layers.VectorLayer.DataSource">
            <summary>
            The VectorDataSource property.
            </summary></member>
        <member name="M:Nutiteq.Layers.VectorLayer.#ctor(Nutiteq.DataSources.VectorDataSource)">
            <summary>
            Constructs a VectorLayer object from a data source.
            </summary>
            <param name="dataSource"> The data source from which this layer loads data.</param></member>
        <member name="M:Nutiteq.Layers.VectorLayer.getDataSourceInternal">
            <summary>
            Returns the vector data source of this vector layer.
            </summary>
            <returns>The vector data source that was bound to this vector layer on construction.</returns></member>
        <member name="M:Nutiteq.Layers.VectorLayer.SwigGetClassNameVectorLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.VectorLayer.SwigGetDirectorObjectVectorLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="T:Nutiteq.VectorTiles.VectorTileDecoder">
            <summary>
            Abstract base class for vector tile decoders.
            </summary></member>
        <member name="M:Nutiteq.VectorTiles.VectorTileDecoder.SwigCreatePolymorphicInstanceVectorTileDecoder(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.VectorTiles.VectorTileDecoder.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.VectorTiles.VectorTileDecoder.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.VectorTiles.VectorTileDecoder.NotifyDecoderChanged">
            <summary>
            Notifies listeners that the decoder parameters have changed. Action taken depends on the implementation of the
            listeners, but generally all cached tiles will be reloaded.
            </summary></member>
        <member name="M:Nutiteq.VectorTiles.VectorTileDecoder.SwigGetClassNameVectorTileDecoder">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.VectorTiles.VectorTileDecoder.SwigGetDirectorObjectVectorTileDecoder">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.VectorTiles.VectorTileDecoder.MinZoom">
            <summary>
            Returns minimum zoom level supported for by the decoder (or style).
            </summary></member>
        <member name="P:Nutiteq.VectorTiles.VectorTileDecoder.MaxZoom">
            <summary>
            Returns maximum zoom level supported for by the decoder (or style).
            </summary></member>
        <member name="T:Nutiteq.Layers.VectorTileLayer">
            <summary>
            A tile layer where each tile is a bitmap. Should be used together with corresponding data source.
            </summary></member>
        <member name="M:Nutiteq.Layers.VectorTileLayer.SwigCreatePolymorphicInstanceVectorTileLayer(System.IntPtr,System.Boolean)">
            <summary>
            Creates a polymorphic instance of the given native object. This is used internally by the SDK.
            </summary></member>
        <member name="M:Nutiteq.Layers.VectorTileLayer.#ctor(Nutiteq.DataSources.TileDataSource,Nutiteq.VectorTiles.VectorTileDecoder)">
            <summary>
            Constructs a VectorTileLayer object from a data source and tile decoder.
            </summary>
            <param name="dataSource"> The data source from which this layer loads data.</param>
            <param name="decoder"> The tile decoder that decoder loaded tiles and applies styles.</param></member>
        <member name="M:Nutiteq.Layers.VectorTileLayer.SwigGetClassNameVectorTileLayer">
            <summary>
            Returns the actual class name of this object. This is used internally by the SDK.
            </summary>
            <returns>The class name of this object.</returns></member>
        <member name="M:Nutiteq.Layers.VectorTileLayer.SwigGetDirectorObjectVectorTileLayer">
            <summary>
            Returns the pointer to the connected director object. This is used internally by the SDK.
            </summary>
            <returns>The pointer to the connected director object or null if director is not connected.</returns></member>
        <member name="P:Nutiteq.Layers.VectorTileLayer.TileCacheCapacity">
            <summary>
            Returns the tile cache capacity.
            </summary></member>
        <member name="P:Nutiteq.Layers.VectorTileLayer.TileDecoder">
            <summary>
            Returns the tile decoder assigned to this layer.
            </summary></member>
        <member name="T:Nutiteq.Graphics.ViewState">
            <summary>
            A class containing various view parameters for a view state.
            </summary></member>
        <member name="M:Nutiteq.Graphics.ViewState.Equals(System.Object)">
            <summary>
            Checks if this object is equal to the specified object.
            </summary>
            <returns>True when objects are equal, false otherwise.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetHashCode">
            <summary>
            Returns the hash value of this object.
            </summary>
            <returns>The hash value of this object.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetCameraPos">
            <summary>
            Returns the camera position.
            </summary>
            <returns>The camera position.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetFocusPos">
            <summary>
            Returns the focus position.
            </summary>
            <returns>The focus position.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetUpVec">
            <summary>
            Returns the up direction vector.
            </summary>
            <returns>The up direction vector.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.Get2PowZoom">
            <summary>
            Returns the number 2 lifted to the power of the zoom level: pow(2, zoom level).
            </summary>
            <returns>pow(2, zoomLevel).</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetNormalizedResolution">
            <summary>
            Get normalized resolution of the view. This is an internal parameter used by vector tile renderer.
            </summary>
            <returns>The screen resolution of the view.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetHalfWidth">
            <summary>
            Returns the width of the map screen divided by 2.
            </summary>
            <returns>The map screen width divided by 2.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetHalfHeight">
            <summary>
            Returns the height of the map screen divided by 2.
            </summary>
            <returns>The map screen height divided by 2.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetHalfFOVY">
            <summary>
            Returns the vertical field of view angle, divided by 2.
            </summary>
            <returns>The vertical field of view angle in degrees, divided by 2.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetTanHalfFOVY">
            <summary>
            Returns the tangent of the half vertical FOV angle.
            </summary>
            <returns>The tangent of the half vertical FOV angle.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetCosHalfFOVY">
            <summary>
            Returns the cosine of the half vertical FOV angle.
            </summary>
            <returns>The cosine of the half vertical FOV angle.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetTanHalfFOVX">
            <summary>
            Returns the tangent of the half horizontal FOV angle.
            </summary>
            <returns>The tangent of the half horizontal FOV angle.</returns></member>
        <member name="M:Nutiteq.Graphics.ViewState.GetCosHalfFOVXY">
            <summary>
            Returns the cosine of the half horizontal FOV angle multiplied
            by the cosine of the half vertical FOV angle.
            </summary>
            <returns>The cosine of the half horizontal FOV angle multiplied
            by the cosine of the half vertical FOV angle.</returns></member>
        <member name="P:Nutiteq.Graphics.ViewState.Frustum">
            <summary>
            Returns the view frustum.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Rotation">
            <summary>
            Returns the camera rotation angle.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Zoom">
            <summary>
            Returns the camera zoom level.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Tilt">
            <summary>
            Returns the camera tilt angle.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.ProjectionMode">
            <summary>
            Returns the projection mode.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Zoom0Distance">
            <summary>
            Returns the distance between the focus and the camera position, when the zoom level is set to 0.
            This parameter depends on the screen size, DPI, tile draw size and field of view settings.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.FOVY">
            <summary>
            Returns the vertical field of view angle.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Near">
            <summary>
            Returns the near plane distance.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Far">
            <summary>
            Returns the far plane distance.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.CameraChanged">
            <summary>
            Returns the state of the camera changed flag.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Width">
            <summary>
            Returns the width of the map screen.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.Height">
            <summary>
            Returns the height of the map screen.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.ScreenWidth">
            <summary>
            Returns the screen width.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.ScreenHeight">
            <summary>
            Returns the screen height.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.DPI">
            <summary>
            Returns the dots per inch parameter of the screen.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.DPToPX">
            <summary>
            Returns a value that is used for converting display independent pixels (dp) to pixels (px).
            This values depends on the screen density.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.UnitToDPCoef">
            <summary>
            Returns the conversion ratio between internal map units and screen density independent pixels (DP or DIP).
            This parameter is dependent on the zoom level, DPI and other screen parameters.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.UnitToPXCoef">
            <summary>
            Returns the conversion ratio between internal map units and screen pixels. This parameter is dependent
            on the zoom level and other screen parameters.
            </summary></member>
        <member name="P:Nutiteq.Graphics.ViewState.AspectRatio">
            <summary>
            Returns the aspect ratio of the map screen. Equal to width / height.
            </summary></member>
    </members>
</doc>
