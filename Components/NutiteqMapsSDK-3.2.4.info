{"Name":"Nutiteq Maps SDK by CartoDB","Id":2734,"Alias":"NutiteqMapsSDK","Description":"\n##About Nutiteq Maps SDK \n\nNutiteq Maps SDK is advanced maps component with flexible extendability. It suits best for advanced client apps for Geographical Information Systems (GIS) data display and editing, field survey, 3D visualization and also end-user apps which need offline maps, professional developer support and more customization options\n\nNutiteq Maps SDK is provided by [CartoDB](http://cartodb.com), the leading provider for geolocation intelligence solutions.\n\n###Key features\n\n* **offline base map** or online base map from vector data source\n* **Map overlay**: Points, Polygons, Lines, Markers, GPS locations, including clustered objects\n* **offline custom map overlays** from MBTiles, bitmaps (as ground overlays) or custom formats\n* **2.5/3D support**: tilt and rotate map, add 3D objects to map, full 3D city\n* works on **iOS and all Android platforms**, including Google Glass, Amazon Kindle Fire, BlackBerry 10 and others where Google Services and Maps are not available\n* **Advanced GIS extensions**: vector overlays (Shapefiles, KML, GPX, WFS etc), raster overlays (GeoTIFF, WMS etc), vector map editing and custom projections are available as separate Pro package. Ask licensing@nutiteq.com for details.\n\n###Windows Phone support\nFor preliminary **Windows Phone 8.1** and **Windows Phone 10** support please check out [https://github.com/nutiteq/hellomap3d-dotnet/](https://github.com/nutiteq/hellomap3d-dotnet/) project. This is not included in Xamarin component.\n\n###Usage\n\n1. You need **sign up** to http://developer.nutiteq.com (**Developer or Pro plan**) or purchase **enterprise license** from [licensing@nutiteq.com](mailto:licensing@nutiteq.com) . Free package and evaluation licenses are available.\n1. See **Getting Started**, and samples as reference implementation\n\n###Support\n\n*When requesting please do not forget to mention that you use Nutiteq Xamarin component and what is your target platform (iOS or Android).*\n\n* [Stackoverflow nutiteq tag](http://stackoverflow.com/questions/tagged/nutiteq)\n* [Nutiteq-dev public developer group](https://groups.google.com/forum/#!forum/nutiteq-dev)\n* Private and premium support levels are available for our enterprise licensees and service subscribers. Please contact [licensing@nutiteq.com](mailto:licensing@nutiteq.com) for more info.\n\n","Version":"3.2.4","Summary":"Offline Maps component","QuickStart":"# Register license key #\n\nYou need following steps before using Nutiteq Maps SDK:\n\n* Sign up in [developer.nutiteq.com](http://developer.nutiteq.com), choose the free **Developer plan**.\n* Add an application. Select **Xamarin iOS** or **Xamarin Android** as application type, and make sure you enter same application ID as you have in your app.\n* Finally you will get license code, which is a long string. This is needed for your code.\n\nIf you cover several platforms, you should register separate apps for each.\n\n# Cross-platform apps #\n\nYou can create one Xamarin project (solution) for Android and iOS and share most of the code. These still need to be two apps, as many app aspects (UI, file system etc) are platform-specific. From Nutiteq SDK API is the same and your code can be shared, except some specific API calls which need Android *context* or file system references. \n\n# Android app#\n\n1) **Add Nutiteq SDK component** to your project\n\n2) **Copy vector style file** (*nutibright-v3.zip*) to your project *Assets* folder. You will find it from http://developer.nutiteq.com/download. This is needed for vector basemap.\n\n3) **Add MapView to your application main layout**\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    android:orientation=\"vertical\" \u003e\n   \u003cnutiteq.ui.MapView\n    android:id=\"@+id/mapView\"\n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"fill_parent\" \n    /\u003e\n\u003c/LinearLayout\u003e\n```\n\n4) **Create MapView object, add a base layer** \n\nYou you can load layout from axml and load the MapView from Layout, or create it with code. Definition of base layer is enough for minimal map configuration.\n\n```csharp\nusing Nutiteq.Ui;\nusing Nutiteq.Layers;\nusing Nutiteq.DataSources;\n\n\n[Activity (Label = \"Nutiteq.HelloMap\", MainLauncher = true)]\npublic class MainActivity : Activity\n{\n\n\tprotected override void OnCreate ( Bundle bundle )\n\t{\n\t\tbase.OnCreate ( bundle );\n\n\t\t// Register license BEFORE creating MapView (done in SetContentView)\n\t\tMapView.registerLicense(\"YOUR_LICENSE_KEY\", this);\n\n\t\t/// Set our view from the \"main\" layout resource\n\t\tSetContentView ( Resource.Layout.Main );\n\t\n\t\t/// Get our map from the layout resource. \n\t\tvar mapView = FindViewById\u003cMapView\u003e ( Resource.Id.mapView );\n\n\t\t/// Online vector base layer\n\t\tvar baseLayer = new NutiteqOnlineVectorTileLayer(\"nutibright-v3.zip\");\n\n\t\t/// Set online base layer  \n\t\tmapView.Layers.Add(baseLayer);\n\t}\n\t\n```\n\n\n# iOS app#\n\n\n1) **Add Nutiteq SDK component** to your project\n\n2) **Copy vector style file** (*osmbright-v3.zip*) to your project. You can take it from samples. This is needed for vector basemap.\n\n3) **Add Map object to app view**. When using Storyboards or XIB, use *GL View* as a view for the map, and *GLK View Controller* with custom Class *MapView*. Here we name it as *Map* . You can also create the MapView in the code.\n\n4) **Initiate map, set base layer**\n\nAdd into MainViewController.cs:\n\n```csharp\nusing Nutiteq.Ui;\nusing Nutiteq.Layers;\nusing Nutiteq.DataSources;\n\npartial class MainViewController : GLKit.GLKViewController\n{\n\n\tpublic override void ViewDidLoad ()\n\t{\n\t\tbase.ViewDidLoad ();\n\n\t\t// Register license BEFORE creating MapView \n\t\tMapView.RegisterLicense(\"YOUR_LICENSE_KEY\");\n\n\t\t/// Online vector base layer\n\t\tvar baseLayer = new NutiteqOnlineVectorTileLayer(\"nutibright-v3.zip\");\n\n\t\t/// Set online base layer\n\t\tMap.Layers.Add(baseLayer);\n\n\t}\n```\n\n\n\n# Android and iOS #\n\n3) **Add a marker** to map, to given coordinates. Add following after creating mapView.\n\nYou must have *Icon.png* in your Assets folder to set bitmap\n\n```csharp\n\n\t\t// Create overlay layer for markers\n\t\tvar proj = new EPSG3857();\n\t\tvar dataSource = new LocalVectorDataSource (proj);\n\t\tvar overlayLayer = new VectorLayer (dataSource);\n\t\tmapView.Layers.Add (overlayLayer);\n\n\t\t// create Marker style\n\t\tvar markersStyleBuilder = new MarkerStyleBuilder ();\n\t\tmarkersStyleBuilder.SetSize (20);\n\t\tUnsignedCharVector iconBytes = AssetUtils.LoadBytes(\"Icon.png\");\n\t\tvar bitmap = new Bitmap (iconBytes, true);\n\t\tmarkersStyleBuilder.SetBitmap (bitmap);\n\n\n\t\t// Marker for London\n\t\tvar marker = new Marker (proj.FromWgs84(new MapPos(-0.8164,51.2383)), markersStyleBuilder.BuildStyle ());\n\t\tdataSource.Add (marker);\n\n```\n\n4) **Other map actions**\n\nSee sample code how to:\n\n* Control map view - set zoom, center, tilt etc\n* Listen events (see MapListener.cs) of clicks to map and map objects\n* Add other objects: Lines, Polygons, Points, Balloons (callouts). You can even add 3D objects and use customized Balloons.\n* Download offline map packages for country or smaller region (e.g. a city)\n","Hash":"ea1fd1d39d66f273a390b071f7d607e9","TargetPlatforms":["ios","android"],"TrialHash":null}